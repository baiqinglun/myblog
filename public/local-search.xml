<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Fluent中的浮力模型</title>
    <link href="/2024/06/25/019%20Fluent%E4%B8%AD%E7%9A%84%E6%B5%AE%E5%8A%9B%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/06/25/019%20Fluent%E4%B8%AD%E7%9A%84%E6%B5%AE%E5%8A%9B%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Fluent中的浮力模型"><a href="#Fluent中的浮力模型" class="headerlink" title="Fluent中的浮力模型"></a>Fluent中的浮力模型</h1><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><p>当计算域开启重力场和能量场时，可在<code>ke</code>模型中考虑浮力的产生。</p><p>由于浮力而产生的湍流公式：</p><p>$$G_b&#x3D;\beta g_i\frac{\mu_t}{\mathrm{Pr}_t}\frac{\partial T}{\partial x_i}$$</p><p>其中$Pr_{t}$是能量的湍流普朗特数，$g_{i}$是重力矢量在$i$方向上的分量。对于标准和可实现<code>ke</code>模型，$Pr_{t}&#x3D;0.85$。在<code>RNG ke</code>模型，$Pr_{t}&#x3D;\frac{1 }{\alpha} $。其中$\alpha$由以下公式计算：</p><p>$$\left|\frac{\alpha-1.3929}{\alpha_0-1.3929}\right|^{0.6321}\left|\frac{\alpha+2.3929}{\alpha_0+2.3929}\right|^{0.3679}&#x3D;\frac{\mu_{\mathrm{mol}}}{\mu_{\mathrm{eff}}}$$</p><p>其中$\alpha_{0}&#x3D;1.0$，在高雷诺数限制下，$\mu_{\mathrm{mol}}&#x2F;\mu_{\mathrm{eff}}\ll1$，$\alpha_{k}&#x3D;\alpha_{\epsilon}\approx1.393$</p><p>系数$\beta $定义为</p><p>$$\beta&#x3D;-\frac1\rho\left(\frac{\partial\rho}{\partial T}\right)_p$$</p><p>对于理想气体状态方程：</p><p>$$G_b&#x3D;-g_i\frac{\mu_t}{\rho\mathrm{Pr}_t}\frac{\partial\rho}{\partial x_i}$$</p><blockquote><p>在不稳定分层中，湍动能趋于增大。对于不稳定的分层，浮力会抑制湍流。</p></blockquote><p>受浮力影响程度由常数$C_{3\epsilon }$决定，在Fluent中可通过以下公式计算</p><p>$$C_{3\epsilon}&#x3D;\tanh\left|\frac{v}{u}\right|$$</p><p>$v$是平行于重力矢量的流速分量，$u$是垂直于重力矢量的流速分量。对于主流方向与重力方向一致的浮力剪切层，该常数为1。对于垂直于重力矢量的浮力剪切层，该值为0。</p><h2 id="2、如何操作"><a href="#2、如何操作" class="headerlink" title="2、如何操作"></a>2、如何操作</h2><p>开启重力加速度和能量方程，即可在<code>ke</code>模型中设置全浮力模型。</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240625092823.png"></p>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Fluent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluent</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python装饰器</title>
    <link href="/2024/04/25/018%20Python%E8%A3%85%E9%A5%B0%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/04/25/018%20Python%E8%A3%85%E9%A5%B0%E5%99%A8%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1、装饰器定义"><a href="#1、装饰器定义" class="headerlink" title="1、装饰器定义"></a>1、装饰器定义</h1><p>函数本身也是对象，能赋值给变量，通过变量名称可以调用函数的功能。此外能通过<code>__name__</code>属性拿到函数的名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fun1&quot;</span>)<br>    <br>f1 = fun1<br>f1.__name__<br><span class="hljs-comment"># &#x27;fun1&#x27;</span><br></code></pre></td></tr></table></figure><p>装饰器是在不改变原函数条件下，为原函数调用前增加新的功能。装饰器其实是一个高阶函数，高阶函数<code>hightfunc</code>接受一个函数对象<code>func</code>，在高阶函数内部定义一个新的函数<code>wrapper</code>，新的函数<code>wrapper</code>在调用<code>func</code>函数对象前后执行一定的操作，之后返回<code>func</code>，整个告诫高阶函数再返回<code>wrapper</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;call <span class="hljs-subst">&#123;func.__name__&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> func<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fun1&quot;</span>)<br>    <br>log(fun1)()<br></code></pre></td></tr></table></figure><p>写成语法糖的形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;call <span class="hljs-subst">&#123;func.__name__&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> func<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@log</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fun1&quot;</span>)<br>    <br>fun1()<br></code></pre></td></tr></table></figure><h1 id="2、装饰器有参函数无参"><a href="#2、装饰器有参函数无参" class="headerlink" title="2、装饰器有参函数无参"></a>2、装饰器有参函数无参</h1><p>使用装饰器时，传入变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">level=<span class="hljs-string">&#x27;debug&#x27;</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>():<br>            func()<br>            <span class="hljs-keyword">if</span> level == <span class="hljs-string">&#x27;warning&#x27;</span>:<br>                logging.warning(<span class="hljs-string">&quot;&#123;&#125; is called&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>            <span class="hljs-keyword">else</span>:<br>                logging.debug(<span class="hljs-string">&quot;&#123;&#125; is called&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>            <span class="hljs-keyword">return</span> func<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> decorator<br><br><span class="hljs-meta">@log(<span class="hljs-params">level=<span class="hljs-string">&quot;warning&quot;</span></span>) </span><span class="hljs-comment"># 添加带参数的装饰器 log()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func()调用了&quot;</span>)<br><br>func()<br><br><span class="hljs-comment"># WARNING:root:func is called</span><br><span class="hljs-comment"># func()调用了</span><br></code></pre></td></tr></table></figure><h1 id="3、装饰器和函数均有参"><a href="#3、装饰器和函数均有参" class="headerlink" title="3、装饰器和函数均有参"></a>3、装饰器和函数均有参</h1><p>需要使用<code>*args, **kwargs</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">level=<span class="hljs-string">&#x27;debug&#x27;</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            ret = func(*args, **kwargs)<br>            <span class="hljs-keyword">if</span> level == <span class="hljs-string">&#x27;warning&#x27;</span>:<br>                logging.warning(<span class="hljs-string">&quot;&#123;&#125; is called&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>            <span class="hljs-keyword">else</span>:<br>                logging.debug(<span class="hljs-string">&quot;&#123;&#125; is called&quot;</span>.<span class="hljs-built_in">format</span>(func.__name__))<br>            <span class="hljs-keyword">return</span> ret<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> decorator<br><br><span class="hljs-meta">@log(<span class="hljs-params">level=<span class="hljs-string">&quot;warning&quot;</span></span>) </span><span class="hljs-comment"># 添加带参数的装饰器 log()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n,m</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;from func(), n=<span class="hljs-subst">&#123;n&#125;</span>,m=<span class="hljs-subst">&#123;m&#125;</span>&quot;</span>)<br><br>func(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>对于<code>*args, **kwargs</code>我了解的还不多，这里不做过多介绍。</p><ul><li><code>*args (Non-Keyword Arguments)</code>相当于列表<code>[&#39;Hello&#39;``, ``&#39;Welcome&#39;``, ``&#39;to&#39;``, ``&#39;GeeksforGeeks&#39;]</code></li><li><code>**kwargs (Keyword Arguments)</code>相当于字典<code>&#123;first=&#39;Geeks&#39;, mid=&#39;for&#39;, last=&#39;Geeks&#39;&#125;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># *args</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;Pomelo&quot;</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">*argv</span>):<br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> argv:<br>        <span class="hljs-built_in">print</span>(arg+<span class="hljs-string">&quot; &quot;</span>)<br>func(*<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># apple </span><br><span class="hljs-comment"># banana </span><br><span class="hljs-comment"># Pomelo</span><br><br><span class="hljs-comment"># **kwargs </span><br>dic = &#123;<span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-string">&quot;Pomelo&quot;</span>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">**kwargs</span>):<br>    <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> kwargs.items():<br>        <span class="hljs-built_in">print</span>(key+<span class="hljs-string">&quot;=&quot;</span>+value)<br>func(**dic)<br><span class="hljs-comment"># 1=apple</span><br><span class="hljs-comment"># 2=banana</span><br><span class="hljs-comment"># 3=Pomelo</span><br><br><br><span class="hljs-comment"># *args,**kwargs </span><br><span class="hljs-built_in">list</span> = [<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;Pomelo&quot;</span>]<br>dic = &#123;<span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;apple&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>:<span class="hljs-string">&quot;banana&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-string">&quot;Pomelo&quot;</span>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">*argv,**kwargs</span>):<br>    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> argv:<br>        <span class="hljs-built_in">print</span>(arg+<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> kwargs.items():<br>        <span class="hljs-built_in">print</span>(key+<span class="hljs-string">&quot;=&quot;</span>+value)<br>func(*<span class="hljs-built_in">list</span>,**dic)<br><span class="hljs-comment"># apple </span><br><span class="hljs-comment"># banana </span><br><span class="hljs-comment"># Pomelo</span><br><span class="hljs-comment"># 1=apple</span><br><span class="hljs-comment"># 2=banana</span><br><span class="hljs-comment"># 3=Pomelo</span><br></code></pre></td></tr></table></figure><h1 id="4、类方法装饰器"><a href="#4、类方法装饰器" class="headerlink" title="4、类方法装饰器"></a>4、类方法装饰器</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decorator</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        start_time = time.time()<br>        ret = func(self, *args, **kwargs)<br>        end_time = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s.%s() cost %f second!&quot;</span> % (self.__class__,<br>              func.__name__, end_time - start_time))<br>        <span class="hljs-keyword">return</span> ret<br>    <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDecorator</span>():<br><span class="hljs-meta">    @decorator</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">mysleep</span>(<span class="hljs-params">self, n</span>):<br>        time.sleep(n)<br><br>obj = TestDecorator()<br>obj.mysleep(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h1 id="5、装饰器类"><a href="#5、装饰器类" class="headerlink" title="5、装饰器类"></a>5、装饰器类</h1><p>会调用<code>__init__</code>和<code>__call__</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tracer</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, func</span>):<br>        self.func = func<br>        self.calls = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        self.calls += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;call %s() %d times&quot;</span> % (self.func.__name__, self.calls))<br>        <span class="hljs-keyword">return</span> self.func(*args, **kwargs)<br><br><span class="hljs-meta">@Tracer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_tracer</span>(<span class="hljs-params">val, name=<span class="hljs-string">&quot;default&quot;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func() name:%s, val: %d&quot;</span> % (name, val))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    test_tracer(i, name=(<span class="hljs-string">&quot;name&quot;</span> + <span class="hljs-built_in">str</span>(i)))<br><br>&gt;&gt;&gt;<br>call test_tracer() <span class="hljs-number">1</span> times<br>func() name:name0, val: <span class="hljs-number">0</span><br>call test_tracer() <span class="hljs-number">2</span> times<br>func() name:name1, val: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="6、-带参数装饰器类"><a href="#6、-带参数装饰器类" class="headerlink" title="6、 带参数装饰器类"></a>6、 带参数装饰器类</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tracer</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, arg0</span>): <span class="hljs-comment"># 可支持任意参数</span><br>        self.arg0 = arg0<br>        self.calls = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            self.calls += <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;arg0:%d call %s() %d times&quot;</span> % (self.arg0, func.__name__, self.calls))<br>            <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> wrapper<br><br><span class="hljs-meta">@Tracer(<span class="hljs-params">arg0=<span class="hljs-number">0</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_tracer</span>(<span class="hljs-params">val, name=<span class="hljs-string">&quot;default&quot;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func() name:%s, val: %d&quot;</span> % (name, val))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    test_tracer(i, name=(<span class="hljs-string">&quot;name&quot;</span> + <span class="hljs-built_in">str</span>(i)))<br><br>&gt;&gt;&gt;<br>arg0:<span class="hljs-number">0</span> call test_tracer() <span class="hljs-number">1</span> times<br>func() name:name0, val: <span class="hljs-number">0</span><br>arg0:<span class="hljs-number">0</span> call test_tracer() <span class="hljs-number">2</span> times<br>func() name:name1, val: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="7、内置装饰器"><a href="#7、内置装饰器" class="headerlink" title="7、内置装饰器"></a>7、内置装饰器</h1><h2 id="7-1-staticmethod"><a href="#7-1-staticmethod" class="headerlink" title="7.1 staticmethod"></a>7.1 staticmethod</h2><p>类的静态函数装饰器，可通过类名直接调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>():<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">static_method</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a static method!&quot;</span>)<br><br>C.static_method()     <span class="hljs-comment"># 类名直接调用</span><br><br>c = C()<br>c.static_method()     <span class="hljs-comment"># 类对象调用</span><br><br>&gt;&gt;&gt;<br>This <span class="hljs-keyword">is</span> a static method!<br>This <span class="hljs-keyword">is</span> a static method!<br></code></pre></td></tr></table></figure><h2 id="7-2-classmethod"><a href="#7-2-classmethod" class="headerlink" title="7.2 classmethod"></a>7.2 classmethod</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>():<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">class_method</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is &quot;</span>, cls)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">C</span>):<br>  <span class="hljs-keyword">pass</span><br><br>C.class_method()  <span class="hljs-comment"># 类名直接调用</span><br>c = C()<br>c.class_method()  <span class="hljs-comment"># 类对象调用</span><br><br>B.class_method()  <span class="hljs-comment"># 继承类调用</span><br><br>&gt;&gt;&gt;<br>This <span class="hljs-keyword">is</span>  &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.C&#x27;</span>&gt;<br>This <span class="hljs-keyword">is</span>  &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.C&#x27;</span>&gt;<br>This <span class="hljs-keyword">is</span>  &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.B&#x27;</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>装饰器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python常用技巧</title>
    <link href="/2024/04/24/017%20Python%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB/"/>
    <url>/2024/04/24/017%20Python%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="1、推导式"><a href="#1、推导式" class="headerlink" title="1、推导式"></a>1、推导式</h1><p>推导式又叫做解析式，是简化冗余代码实质有效的方法，<code>Python</code>中实用的语法糖，可以分为以下几类：</p><ol><li>列表推导式（⭐）</li><li>字典推导式（⭐）</li><li>集合推导式</li><li>元祖推导式</li></ol><p>下面只介绍常用的列表推导式和字典推导式。</p><h2 id="1-1-列表推导式"><a href="#1-1-列表推导式" class="headerlink" title="1.1 列表推导式"></a>1.1 列表推导式</h2><p>对列表中每个元素进行一定操作。</p><div class="note note-primary">            <p>基本使用</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]<br>list1 = [x+<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>]<br><span class="hljs-built_in">print</span>(list1)<br><span class="hljs-comment"># [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>条件表达式</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Jason&quot;</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;Jani&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]<br>list1 = [name+<span class="hljs-string">&quot;666&quot;</span> <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name) &gt; <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(list1)<br><span class="hljs-comment"># [&#x27;Jason666&#x27;, &#x27;Peter666&#x27;, &#x27;Jani666&#x27;]</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>多个for循环</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">time = [<span class="hljs-string">&#x27;%.2d:%.2d&#x27;</span>%(h,m )<span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">24</span>) <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,<span class="hljs-number">5</span>) ]<br><span class="hljs-built_in">print</span>(time)<br><span class="hljs-comment"># [&#x27;00:00&#x27;, &#x27;00:05&#x27;, &#x27;00:10&#x27;, &#x27;00:15&#x27;, &#x27;00:20&#x27;, &#x27;00:25&#x27;, &#x27;00:30&#x27;, &#x27;00:35&#x27;, &#x27;00:40&#x27;, &#x27;00:45&#x27;, &#x27;00:50&#x27;, &#x27;00:55&#x27;, &#x27;01:00&#x27;, &#x27;01:05&#x27;, &#x27;01:10&#x27;, &#x27;01:15&#x27;, &#x27;01:20&#x27;, &#x27;01:25&#x27;, &#x27;01:30&#x27;, &#x27;01:35&#x27;, &#x27;01:40&#x27;, &#x27;01:45&#x27;, &#x27;01:50&#x27;, &#x27;01:55&#x27;, &#x27;02:00&#x27;, &#x27;02:05&#x27;, &#x27;02:10&#x27;, &#x27;02:15&#x27;, &#x27;02:20&#x27;, &#x27;02:25&#x27;, &#x27;02:30&#x27;, &#x27;02:35&#x27;, &#x27;02:40&#x27;, &#x27;02:45&#x27;, &#x27;02:50&#x27;, &#x27;02:55&#x27;, &#x27;03:00&#x27;, &#x27;03:05&#x27;, &#x27;03:10&#x27;, &#x27;03:15&#x27;, &#x27;03:20&#x27;, &#x27;03:25&#x27;, &#x27;03:30&#x27;, &#x27;03:35&#x27;, &#x27;03:40&#x27;, &#x27;03:45&#x27;, &#x27;03:50&#x27;, &#x27;03:55&#x27;, &#x27;04:00&#x27;, &#x27;04:05&#x27;, &#x27;04:10&#x27;, &#x27;04:15&#x27;, &#x27;04:20&#x27;, &#x27;04:25&#x27;, &#x27;04:30&#x27;, &#x27;04:35&#x27;, &#x27;04:40&#x27;, &#x27;04:45&#x27;, &#x27;04:50&#x27;, &#x27;04:55&#x27;, &#x27;05:00&#x27;, &#x27;05:05&#x27;, &#x27;05:10&#x27;, &#x27;05:15&#x27;, &#x27;05:20&#x27;, &#x27;05:25&#x27;, &#x27;05:30&#x27;, &#x27;05:35&#x27;, &#x27;05:40&#x27;, &#x27;05:45&#x27;, &#x27;05:50&#x27;, &#x27;05:55&#x27;, &#x27;06:00&#x27;, &#x27;06:05&#x27;, &#x27;06:10&#x27;, &#x27;06:15&#x27;, &#x27;06:20&#x27;, &#x27;06:25&#x27;, &#x27;06:30&#x27;, &#x27;06:35&#x27;, &#x27;06:40&#x27;, &#x27;06:45&#x27;, &#x27;06:50&#x27;, &#x27;06:55&#x27;, &#x27;07:00&#x27;, &#x27;07:05&#x27;, &#x27;07:10&#x27;, &#x27;07:15&#x27;, &#x27;07:20&#x27;, &#x27;07:25&#x27;, &#x27;07:30&#x27;, &#x27;07:35&#x27;, &#x27;07:40&#x27;, &#x27;07:45&#x27;, &#x27;07:50&#x27;, &#x27;07:55&#x27;, &#x27;08:00&#x27;, &#x27;08:05&#x27;, &#x27;08:10&#x27;, &#x27;08:15&#x27;, &#x27;08:20&#x27;, &#x27;08:25&#x27;, &#x27;08:30&#x27;, &#x27;08:35&#x27;, &#x27;08:40&#x27;, &#x27;08:45&#x27;, &#x27;08:50&#x27;, &#x27;08:55&#x27;, &#x27;09:00&#x27;, &#x27;09:05&#x27;, &#x27;09:10&#x27;, &#x27;09:15&#x27;, &#x27;09:20&#x27;, &#x27;09:25&#x27;, &#x27;09:30&#x27;, &#x27;09:35&#x27;, &#x27;09:40&#x27;, &#x27;09:45&#x27;, &#x27;09:50&#x27;, &#x27;09:55&#x27;, &#x27;10:00&#x27;, &#x27;10:05&#x27;, &#x27;10:10&#x27;, &#x27;10:15&#x27;, &#x27;10:20&#x27;, &#x27;10:25&#x27;, &#x27;10:30&#x27;, &#x27;10:35&#x27;, &#x27;10:40&#x27;, &#x27;10:45&#x27;, &#x27;10:50&#x27;, &#x27;10:55&#x27;, &#x27;11:00&#x27;, &#x27;11:05&#x27;, &#x27;11:10&#x27;, &#x27;11:15&#x27;, &#x27;11:20&#x27;, &#x27;11:25&#x27;, &#x27;11:30&#x27;, &#x27;11:35&#x27;, &#x27;11:40&#x27;, &#x27;11:45&#x27;, &#x27;11:50&#x27;, &#x27;11:55&#x27;, &#x27;12:00&#x27;, &#x27;12:05&#x27;, &#x27;12:10&#x27;, &#x27;12:15&#x27;, &#x27;12:20&#x27;, &#x27;12:25&#x27;, &#x27;12:30&#x27;, &#x27;12:35&#x27;, &#x27;12:40&#x27;, &#x27;12:45&#x27;, &#x27;12:50&#x27;, &#x27;12:55&#x27;, &#x27;13:00&#x27;, &#x27;13:05&#x27;, &#x27;13:10&#x27;, &#x27;13:15&#x27;, &#x27;13:20&#x27;, &#x27;13:25&#x27;, &#x27;13:30&#x27;, &#x27;13:35&#x27;, &#x27;13:40&#x27;, &#x27;13:45&#x27;, &#x27;13:50&#x27;, &#x27;13:55&#x27;, &#x27;14:00&#x27;, &#x27;14:05&#x27;, &#x27;14:10&#x27;, &#x27;14:15&#x27;, &#x27;14:20&#x27;, &#x27;14:25&#x27;, &#x27;14:30&#x27;, &#x27;14:35&#x27;, &#x27;14:40&#x27;, &#x27;14:45&#x27;, &#x27;14:50&#x27;, &#x27;14:55&#x27;, &#x27;15:00&#x27;, &#x27;15:05&#x27;, &#x27;15:10&#x27;, &#x27;15:15&#x27;, &#x27;15:20&#x27;, &#x27;15:25&#x27;, &#x27;15:30&#x27;, &#x27;15:35&#x27;, &#x27;15:40&#x27;, &#x27;15:45&#x27;, &#x27;15:50&#x27;, &#x27;15:55&#x27;, &#x27;16:00&#x27;, &#x27;16:05&#x27;, &#x27;16:10&#x27;, &#x27;16:15&#x27;, &#x27;16:20&#x27;, &#x27;16:25&#x27;, &#x27;16:30&#x27;, &#x27;16:35&#x27;, &#x27;16:40&#x27;, &#x27;16:45&#x27;, &#x27;16:50&#x27;, &#x27;16:55&#x27;, &#x27;17:00&#x27;, &#x27;17:05&#x27;, &#x27;17:10&#x27;, &#x27;17:15&#x27;, &#x27;17:20&#x27;, &#x27;17:25&#x27;, &#x27;17:30&#x27;, &#x27;17:35&#x27;, &#x27;17:40&#x27;, &#x27;17:45&#x27;, &#x27;17:50&#x27;, &#x27;17:55&#x27;, &#x27;18:00&#x27;, &#x27;18:05&#x27;, &#x27;18:10&#x27;, &#x27;18:15&#x27;, &#x27;18:20&#x27;, &#x27;18:25&#x27;, &#x27;18:30&#x27;, &#x27;18:35&#x27;, &#x27;18:40&#x27;, &#x27;18:45&#x27;, &#x27;18:50&#x27;, &#x27;18:55&#x27;, &#x27;19:00&#x27;, &#x27;19:05&#x27;, &#x27;19:10&#x27;, &#x27;19:15&#x27;, &#x27;19:20&#x27;, &#x27;19:25&#x27;, &#x27;19:30&#x27;, &#x27;19:35&#x27;, &#x27;19:40&#x27;, &#x27;19:45&#x27;, &#x27;19:50&#x27;, &#x27;19:55&#x27;, &#x27;20:00&#x27;, &#x27;20:05&#x27;, &#x27;20:10&#x27;, &#x27;20:15&#x27;, &#x27;20:20&#x27;, &#x27;20:25&#x27;, &#x27;20:30&#x27;, &#x27;20:35&#x27;, &#x27;20:40&#x27;, &#x27;20:45&#x27;, &#x27;20:50&#x27;, &#x27;20:55&#x27;, &#x27;21:00&#x27;, &#x27;21:05&#x27;, &#x27;21:10&#x27;, &#x27;21:15&#x27;, &#x27;21:20&#x27;, &#x27;21:25&#x27;, &#x27;21:30&#x27;, &#x27;21:35&#x27;, &#x27;21:40&#x27;, &#x27;21:45&#x27;, &#x27;21:50&#x27;, &#x27;21:55&#x27;, &#x27;22:00&#x27;, &#x27;22:05&#x27;, &#x27;22:10&#x27;, &#x27;22:15&#x27;, &#x27;22:20&#x27;, &#x27;22:25&#x27;, &#x27;22:30&#x27;, &#x27;22:35&#x27;, &#x27;22:40&#x27;, &#x27;22:45&#x27;, &#x27;22:50&#x27;, &#x27;22:55&#x27;, &#x27;23:00&#x27;, &#x27;23:05&#x27;, &#x27;23:10&#x27;, &#x27;23:15&#x27;, &#x27;23:20&#x27;, &#x27;23:25&#x27;, &#x27;23:30&#x27;, &#x27;23:35&#x27;, &#x27;23:40&#x27;, &#x27;23:45&#x27;, &#x27;23:50&#x27;, &#x27;23:55&#x27;]</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>多个for循环+条件表达式</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [(x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>] <span class="hljs-keyword">if</span> x != y]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]</span><br></code></pre></td></tr></table></figure><h2 id="1-2-字典推导式"><a href="#1-2-字典推导式" class="headerlink" title="1.2 字典推导式"></a>1.2 字典推导式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">listdemo = [<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Jason&quot;</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;Jani&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]<br>newdict = &#123;key:<span class="hljs-built_in">len</span>(key) <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> listdemo&#125;<br><span class="hljs-built_in">print</span>(newdict)<br><span class="hljs-comment"># &#123;&#x27;Bob&#x27;: 3, &#x27;Jason&#x27;: 5, &#x27;Peter&#x27;: 5, &#x27;Jani&#x27;: 4, &#x27;Tom&#x27;: 3&#125;</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>互换key和value的值</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">person = &#123;<span class="hljs-string">&#x27;角色名&#x27;</span>:<span class="hljs-string">&#x27;宫本武藏&#x27;</span>,<span class="hljs-string">&#x27;定位&#x27;</span>:<span class="hljs-string">&#x27;刺客&#x27;</span>&#125;<br>person_reverse = &#123;k:v <span class="hljs-keyword">for</span> v,k <span class="hljs-keyword">in</span> person.items()&#125;<br><span class="hljs-built_in">print</span>(person_reverse)<br><span class="hljs-comment"># &#123;&#x27;宫本武藏&#x27;: &#x27;角色名&#x27;, &#x27;刺客&#x27;: &#x27;定位&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h1 id="2、字典遍历"><a href="#2、字典遍历" class="headerlink" title="2、字典遍历"></a>2、字典遍历</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">person = &#123;<span class="hljs-string">&#x27;角色名&#x27;</span>:<span class="hljs-string">&#x27;宫本武藏&#x27;</span>,<span class="hljs-string">&#x27;定位&#x27;</span>:<span class="hljs-string">&#x27;刺客&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> person.items():<br>    <span class="hljs-built_in">print</span>(key,value)<br></code></pre></td></tr></table></figure><h1 id="3、判断元素是否在列表中"><a href="#3、判断元素是否在列表中" class="headerlink" title="3、判断元素是否在列表中"></a>3、判断元素是否在列表中</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">listdemo = [<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Jason&quot;</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;Jani&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Peter&quot;</span> <span class="hljs-keyword">in</span> listdemo:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes&quot;</span>)<br><span class="hljs-comment"># Yes</span><br></code></pre></td></tr></table></figure><h1 id="4、反转字符串"><a href="#4、反转字符串" class="headerlink" title="4、反转字符串"></a>4、反转字符串</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;Tom&quot;</span><br>reverse_name = name[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(reverse_name)<br><span class="hljs-comment"># moT</span><br></code></pre></td></tr></table></figure><h1 id="5、反转列表"><a href="#5、反转列表" class="headerlink" title="5、反转列表"></a>5、反转列表</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Jason&quot;</span>,<span class="hljs-string">&quot;Peter&quot;</span>,<span class="hljs-string">&quot;Jani&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>]<br>reverse_name_list = name_list[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(reverse_name_list)<br><span class="hljs-comment"># [&#x27;Tom&#x27;, &#x27;Jani&#x27;, &#x27;Peter&#x27;, &#x27;Jason&#x27;, &#x27;Bob&#x27;]</span><br></code></pre></td></tr></table></figure><h1 id="6、获取时间"><a href="#6、获取时间" class="headerlink" title="6、获取时间"></a>6、获取时间</h1><div class="note note-primary">            <p>获取当前时间</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br>current_time = datetime.datetime.now()<br><span class="hljs-built_in">print</span>(current_time)<br><span class="hljs-comment"># 2024-04-24 23:59:57.567560</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>获取当前日期</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br>current_date = datetime.date.today()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前日期:&quot;</span>, current_date)<br><span class="hljs-comment"># 当前日期: 2024-04-25</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>获取毫秒级时间（程序执行时间）</p>          </div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br>start_time = time.time()<br>numbers = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>)]<br>end_time = time.time()<br>time_ = end_time - start_time<br><span class="hljs-built_in">print</span>(time_)<br><span class="hljs-comment"># 0.03652048110961914</span><br></code></pre></td></tr></table></figure><h1 id="7、三元运算符"><a href="#7、三元运算符" class="headerlink" title="7、三元运算符"></a>7、三元运算符</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br><span class="hljs-built_in">max</span> = a <span class="hljs-keyword">if</span> a&gt;b <span class="hljs-keyword">else</span> b<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>)<br><span class="hljs-comment"># 2</span><br></code></pre></td></tr></table></figure><h1 id="8、枚举循环"><a href="#8、枚举循环" class="headerlink" title="8、枚举循环"></a>8、枚举循环</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;banana&#x27;</span>]<br><span class="hljs-keyword">for</span> index,fruit <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(fruits):<br>    <span class="hljs-built_in">print</span>(index,fruit)<br><span class="hljs-comment"># 0 apple</span><br><span class="hljs-comment"># 1 banana</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决matplotlib绘图中英文混用问题</title>
    <link href="/2024/04/17/016%20matplotlib%E7%BB%98%E5%9B%BE%E4%B8%AD%E8%8B%B1%E6%96%87%E6%B7%B7%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2024/04/17/016%20matplotlib%E7%BB%98%E5%9B%BE%E4%B8%AD%E8%8B%B1%E6%96%87%E6%B7%B7%E7%94%A8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>最近在处理实验数据，因为有c++基础，尝试使用python进行绘图。</p><div class="note note-danger">            <p>目前遇到一个问题：想要在一张图中中文使用宋体，英文使用新罗马字体该如何解决？</p>          </div><p>在网上查阅了大量的资料，找到了几种解决办法，总结起来就3种：</p><ol><li>全局使用中文，在需要使用英文的地方使用latex公式书写；</li><li>使用外部</li><li>合并宋体和新罗马字体为新字体<code>timessimsun</code>，重新导入matplotlib</li></ol><h2 id="第一种方案：全局宋体-latex新罗马"><a href="#第一种方案：全局宋体-latex新罗马" class="headerlink" title="第一种方案：全局宋体+latex新罗马"></a>第一种方案：全局宋体+latex新罗马</h2><p>比如在绘制text时，英文使用latex公式进行书写，可将英文显示为新罗马字体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>rc = &#123;<span class="hljs-string">&quot;font.family&quot;</span> : <span class="hljs-string">&quot;Times New Roman&quot;</span>,<br>      <span class="hljs-string">&quot;mathtext.fontset&quot;</span> : <span class="hljs-string">&quot;stix&quot;</span>,<br>      &#125;<br>plt.rcParams.update(rc)<br>fig,ax = plt.subplots(dpi = <span class="hljs-number">300</span>)<br>ax.set_xlabel(<span class="hljs-string">r&#x27;密度$\mathrm&#123;kg/m&#125;^3$&#x27;</span>,fontname = <span class="hljs-string">&#x27;SimSun&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>ax.text(<span class="hljs-number">0.2</span>,<span class="hljs-number">0.8</span>,<span class="hljs-string">r&#x27;宋体 $\mathrm&#123;Times New Roman&#125;$(正体)&#x27;</span>,fontname = <span class="hljs-string">&#x27;SimSun&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>ax.text(<span class="hljs-number">0.2</span>,<span class="hljs-number">0.6</span>,<span class="hljs-string">r&#x27;宋体 $Times New Roman$(斜体)&#x27;</span>,fontname = <span class="hljs-string">&#x27;SimSun&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>ax.text(<span class="hljs-number">0.2</span>,<span class="hljs-number">0.4</span>,<span class="hljs-string">r&#x27;$\mathrm&#123;m^3&#125;\ m^3$&#x27;</span>,fontsize = <span class="hljs-number">30</span>)<br>fig.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417004233122.png" alt="image-20240417004233122"></p><p>这时可能还是不行，原因是<code>matplotlib</code>没有找到宋体</p><p><strong>修改配置文件</strong></p><p><code>C:\Users\23984\.conda\envs\py-data-deal\Lib\site-packages\matplotlib\mpl-data\matplotlibrc</code>，也就是<code>Python</code>目录下的<code>Lib\site-packages\matplotlib\mpl-data\matplotlibrc</code></p><p>修改字体类型为<code>serif</code>，并添加宋体</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417010437557.png" alt="image-20240417010437557"></p><p><strong>更改缓存文件</strong></p><p><code>C:\Users\23984\.matplotlib\fontlist-v330.json</code></p><p>在ttflist中重新新增一份<code>simsun</code>字体，定位到字体存放的位置</p><blockquote><p>这个字体可在电脑默认字体库中找到，在<code>C:\Windows\Fonts</code>目录下</p></blockquote><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417010608917.png" alt="image-20240417010608917"></p><p>完成</p><div class="note note-danger">            <p>但是这个方法有个很明显的局限性，就是需要手动在英文的地方输入latex公式，其一对不熟悉latex的伙伴不友好，其二若数字是存储在一个变量中如何在latex获取变量的值。比如在绘制lengend时，1000g&#x2F;m3中的1000是存储在动态变量中的，这时就不能通过第一种方法显示更改为新罗马字体。</p>          </div><h2 id="第二种方案：latex包"><a href="#第二种方案：latex包" class="headerlink" title="第二种方案：latex包"></a>第二种方案：latex包</h2><p>这种方案需要使用第三方 LaTex包 ，xeCJK 是一个提供中文、日文和韩文支持的软件包。输入以下代码老是报错，目前我没有成功，所以此方案不做详细介绍，如果有小伙伴通过这种方法成功了，还请一起交流学习。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib<br>mpl.use(<span class="hljs-string">&#x27;pgf&#x27;</span>) <span class="hljs-comment"># stwich backend to pgf</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>    plt.rcParams.update(&#123;<br>    <span class="hljs-string">&quot;text.usetex&quot;</span>: <span class="hljs-literal">True</span>,<span class="hljs-comment"># use default xelatex</span><br>    <span class="hljs-string">&quot;pgf.rcfonts&quot;</span>: <span class="hljs-literal">False</span>,<span class="hljs-comment"># turn off default matplotlib fonts properties</span><br>    <span class="hljs-string">&quot;pgf.preamble&quot;</span>: [<br>         <span class="hljs-string">r&#x27;\usepackage&#123;fontspec&#125;&#x27;</span>,<br>         <span class="hljs-string">r&#x27;\setmainfont&#123;Times New Roman&#125;&#x27;</span>,<span class="hljs-comment"># EN fonts Romans</span><br>         <span class="hljs-string">r&#x27;\usepackage&#123;xeCJK&#125;&#x27;</span>,<span class="hljs-comment"># import xeCJK</span><br>         <span class="hljs-string">r&#x27;\setCJKmainfont&#123;SimSun&#125;&#x27;</span>,<span class="hljs-comment"># set CJK fonts as SimSun</span><br>         <span class="hljs-string">r&#x27;\xeCJKsetup&#123;CJKecglue=&#125;&#x27;</span>,<span class="hljs-comment"># turn off one space between CJK and EN fonts</span><br>         ]<br>&#125;)<br>plt.rcParams[<span class="hljs-string">&#x27;savefig.dpi&#x27;</span>]=<span class="hljs-number">300</span><br>plt.figure(figsize=(<span class="hljs-number">4.5</span>, <span class="hljs-number">2.5</span>))<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<br>plt.text(<span class="hljs-number">2.5</span>, <span class="hljs-number">2.</span>, <span class="hljs-string">&quot;\CJKfontspec&#123;SimHei&#125;&#123;黑体标注&#125;&quot;</span>)<span class="hljs-comment"># Annotation by SimHei</span><br>plt.xlabel(<span class="hljs-string">&quot;宋体坐标标签(units)&quot;</span>)<span class="hljs-comment"># CJK&amp;EN fonts mixed</span><br>plt.tight_layout(<span class="hljs-number">.5</span>)<br>plt.savefig(<span class="hljs-string">&#x27;examples.png&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="第三种方法：合并新字体"><a href="#第三种方法：合并新字体" class="headerlink" title="第三种方法：合并新字体"></a>第三种方法：合并新字体</h2><p>这是比较推荐的一种方法，就是将新罗马和宋体两种字体合并为一种字体使用，需要使用字体合并工具，这里我直接在网上找到了别人合并好的，<a href="https://pan.baidu.com/s/1Dis12wv7cbDE-l61oGcnWQ?pwd=t036">点击下载</a>。</p><p>将合并好的字体放在<code>matplotlib</code>包目录下，我这里使用的是<code>anaconda</code>字体文件夹是<code>C:\Users\23984\.conda\envs\py-data-deal\Lib\site-packages\matplotlib\mpl-data\fonts\ttf</code>，在<code>Python</code>环境下的<code>Lib\site-packages\matplotlib\mpl-data\fonts\ttf</code></p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417005515518.png" alt="image-20240417005515518"></p><p><strong>修改配置文件</strong></p><p><code>C:\Users\23984\.conda\envs\py-data-deal\Lib\site-packages\matplotlib\mpl-data\matplotlibrc</code>，也就是<code>Python</code>目录下的<code>Lib\site-packages\matplotlib\mpl-data\matplotlibrc</code></p><p>修改字体类型为<code>serif</code>，并添加新和成的字体</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417005737211.png" alt="image-20240417005737211"></p><p><strong>更改缓存文件</strong></p><p><code>C:\Users\23984\.matplotlib\fontlist-v330.json</code></p><p>在ttflist中重新新增一份<code>timessimsun</code>字体，定位到字体存放的位置</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417005920759.png" alt="image-20240417005920759"></p><p><strong>测试代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> rcParams<br><br><br>config = &#123;<br>      <span class="hljs-string">&quot;font.family&quot;</span>:<span class="hljs-string">&#x27;serif&#x27;</span>,<br>      <span class="hljs-string">&quot;mathtext.fontset&quot;</span>:<span class="hljs-string">&#x27;stix&#x27;</span>,<br>      <span class="hljs-string">&quot;font.serif&quot;</span>: <span class="hljs-string">&#x27;timessimsun&#x27;</span>,<br>&#125;<br>rcParams.update(config)<br>plt.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span>    <span class="hljs-comment"># 解决负号显示为方块的问题</span><br><br>fig,ax = plt.subplots(dpi = <span class="hljs-number">300</span>)<br>ax.set_xlabel(<span class="hljs-string">r&#x27;密度$\mathrm&#123;kg/m&#125;^3$&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>ax.text(<span class="hljs-number">0.05</span>,<span class="hljs-number">0.6</span>,<span class="hljs-string">r&#x27;matplotlib中文使用宋体英文使用新罗马&#x27;</span>,fontsize = <span class="hljs-number">20</span>)<br>fig.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240417011423583.png" alt="image-20240417011423583"></p><div class="note note-success">            <p>完成</p>          </div><div class="note note-primary">            <p>参考链接:<a href="https://stackoverflow.com/questions/44008032/how-to-mix-chinese-and-english-with-matplotlib">https://stackoverflow.com/questions/44008032/how-to-mix-chinese-and-english-with-matplotlib</a></p>          </div>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>matplotlib</tag>
      
      <tag>科研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20240414【再忙也要照顾好自己】</title>
    <link href="/2024/04/14/015%2020240414%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/04/14/015%2020240414%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<p>这些天一直忙着做实验，把自己陷入忙碌中，发现自己身上的缺陷还是很明显的。</p><ol><li>不虚心接受别人的建议；</li><li>做事容易慌张，没有规划；</li></ol><p>第一点我相信很多人都会这样，就是你说的可以对，但我一定不是错的。我也认为承认自己错了是一件非常丢人的事，那些“心灵鸡汤”总是会说让勇于承认自己的错误，但凡事都要有个前提。有时候你站在某个位置不能承认自己是错误的，改错往往比承认错误更有价值。曹操作为统领一方的诸侯，有时也会决策失误，比如赤壁之战，但是他决不能承认自己错了，因为一旦承认自己错了，很多将领就会认为他没有能力统领军队。而此时从失败中总结教训是最好的选择，不仅能鼓舞士气，还能体现自己的独特性格。</p><p>有时我不是不想承认自己的错误，而是本身就没有什么错误可言。在做实验中，一件小事本身就有很多种做法，而这些做法中都没有对错之分，只不过是思考问题角度不同导致的。总有某些人自以为是，认为自己想的就是正确的，好为人师，把自己的想法强加在别人身上，说一些让人反感的话，“你那些做不是更好吗？”“你为什么这样做，你为什么不那样做”。我心里真是想骂人，可是为了一起完成任务还是要忍下来。我不想争对与错，因为没有对错之分，即使有对错之分，都是一些无关紧要的小事，何必要争论。现在我也懒得去争论，你说什么就是什么，我不教训你，以后自有人教训你，你说你的，我做我的就好了。</p><p>今天是14号了，抑爆部分做的稀碎。实验过程中总会遇见各种各样的问题，有时一个小问题能卡人很长时间。今天因为点火电极的事让人很崩溃，一会能打得着火一会打不着，即使这次能打着，受到一点扰动就打不着。120L球固体重复性极差，压力曲线下降段有一小节平滑段，一开始认为是点火时间的问题，之后又认为是传感器的问题，但后来换了氢气还是会出现这种状况，到现在都没有找到原因。不管了，明天直接做气体的抑爆实验，没有这么多时间让我想原因，目前最重要的就是完成项目的相关实验，尤其是气体的。明天开始做气体的空白实验以及抑爆实验，老板的目的是能抑制住，我的目的是有数据，只有有效果就好。</p>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20240401【钝感力】</title>
    <link href="/2024/04/01/014%2020240401%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/04/01/014%2020240401%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<p>网上总是能看到这样的毒鸡汤：“太用力的人走不远。”</p><p>性格使然，我本想着自己能够心静如水，坦然面对生活中的琐事。但在面对新鲜事物时，脑袋总是一团浆糊，尤其是当某件事由我来主导，这种现象愈加明显。</p><p>究其原因，是自己办事还是不稳重，容易慌乱。在面对一件事时，第一想的不是如何去解决这件事，而是太在意自身的标签，生怕把事情搞砸了。结果可想而知，脑子里全部都是办不好别人会说什么闲话之类的场景，而没有心思去解决当前的问题。</p><p>不知道这种好不好改变！</p><p>但是我想改变，我想变得“钝感力”一些。</p><p>不去过分关注别人的评价，在做事时专心做。如果有条件可提前规划，有时看到别人办事能力强，部分原因就是他们有一定的经验亦或是在办事之前已经在脑海中将做事流程过了一遍。等到真办起这件事时，一是心里有一定的准备不会慌乱（这是心理上的作用），二是已经“做过一遍”。</p><ul><li>做人：不要过分在意他人眼光，集中精力搞自己的事。</li><li>做事：提前在脑中预演一遍，把流程搞清楚，就知道难点在哪，还缺少什么东西，什么应该注意……</li></ul>]]></content>
    
    
    <categories>
      
      <category>随想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>边界层理论</title>
    <link href="/2024/03/20/013%20%E8%BE%B9%E7%95%8C%E5%B1%82%E7%90%86%E8%AE%BA/"/>
    <url>/2024/03/20/013%20%E8%BE%B9%E7%95%8C%E5%B1%82%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="边界层理论"><a href="#边界层理论" class="headerlink" title="边界层理论"></a>边界层理论</h1><p>关键词：<span class="label label-primary">边界层</span> <span class="label label-info">增长比率</span> <span class="label label-success">y+</span></p><p>疑问：</p><ol><li>边界层应该画多少个（N）？</li><li>第一层网格的大小（yH）？</li><li>增长比率是多少（G）？</li></ol><h2 id="1、边界层理论"><a href="#1、边界层理论" class="headerlink" title="1、边界层理论"></a>1、边界层理论</h2><p>流体在大雷诺数下作绕流流动时，在离固体壁面较远处，粘性力比惯性力小得多，可以忽略；但在固体壁面附近的薄层中，粘性力的影响则不能忽略，沿壁面法线方向存在相当大的速度梯度，这一薄层叫做边界层。流体的雷诺数越大，边界层越薄。</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320150149505.png" alt="image-20240320150149505"></p><p>需要小的单元来捕获给定方向上的梯度。</p><p>${\delta_{99}}$表示速度到达自由流速度99%时厚度。</p><div class="note note-light">            <ol><li>在边界层内，粘性力与惯性力同一数量级</li><li>由于边界层很薄，可以近似认为边界层中各截面上的压强等于同一截面上边界层外边界上的压强值。</li></ol>          </div><h3 id="无粘流动与真实流动的区别"><a href="#无粘流动与真实流动的区别" class="headerlink" title="无粘流动与真实流动的区别"></a>无粘流动与真实流动的区别</h3><p>考虑边界层的存在，在后方会出现分离区</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320154409785.png" alt="image-20240320154409785"></p><h2 id="2、第一层网格大小"><a href="#2、第一层网格大小" class="headerlink" title="2、第一层网格大小"></a>2、第一层网格大小</h2><p>yH依赖于y+的值</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320151316147.png" alt="image-20240320151316147"></p><p>$$y^+&#x3D;\frac{\rho u_\tau y_p}\mu $$</p><div class="note note-light">            <ul><li>动力粘度：单位为Pa.s(N&#x2F;m2.s),厘泊（CP），1Pa.s&#x3D;10P（泊）&#x3D;1000CP（厘泊）</li><li>运动粘度V：即动力粘度u与密度p的比值：v&#x3D;u&#x2F;p，运动粘度的单位为m2&#x2F;s，习惯单位为：厘斯(mm2&#x2F;s)</li><li>这里指的是动力粘度</li></ul>          </div><h2 id="3、总高度"><a href="#3、总高度" class="headerlink" title="3、总高度"></a>3、总高度</h2><p>网格边界层的总高度要包含${\delta_{99}}$</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320151535403.png" alt="image-20240320151535403"></p><p>2个边界层</p><p>$$y_T&#x3D;y_H+y_H*G$$</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320151740787.png" alt="image-20240320151740787"></p><p>3个边界层</p><p>$$y_T&#x3D;y_H+y_HG+y_HG^2$$</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320151857224.png" alt="image-20240320151857224"></p><p>我们可以得出边界层公式</p><p>$$y_T&#x3D;y_H+y_HG+y_HG^2+y_HG^3+…+y_HG^{N-1}$$</p><p>即</p><p>$$\sum_{k&#x3D;0}^{N-1}y_HG^k&#x3D;y_H\frac{1-G^N}{1-G}$$</p><p>$$\delta_{99}&#x3D;y_H\frac{1-G^N}{1-G}$$</p><p>而边界层厚度的计算公式为</p><p>$$\begin{aligned}\delta_{99}&amp;&#x3D;\frac{4.91L}{\sqrt{Re_L}}\quad&amp;Re&lt;5\times10^5\\delta_{99}&amp;&#x3D;\frac{0.38L}{Re_L^{1&#x2F;5}}\quad&amp;Re&gt;5\times10^5\end{aligned}$$</p><h2 id="4、G和N如何确定"><a href="#4、G和N如何确定" class="headerlink" title="4、G和N如何确定"></a>4、G和N如何确定</h2><p>首先可以大致猜测一下</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320152635843.png" alt="image-20240320152635843"></p><p>如果N&gt;10，则第一个网格高度约为30</p><p>如果N&gt;25，则第一个网格高度约为1</p><div class="note note-light">            <p>通常</p><ul><li>1.05&lt;G&lt;1.3</li><li>10&lt;N&lt;30</li></ul>          </div><h2 id="5、如何确定网格是好坏"><a href="#5、如何确定网格是好坏" class="headerlink" title="5、如何确定网格是好坏"></a>5、如何确定网格是好坏</h2><h3 id="小的网格转变"><a href="#小的网格转变" class="headerlink" title="小的网格转变"></a>小的网格转变</h3><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320153250656.png" alt="image-20240320153250656"></p><h3 id="在大涡模拟中"><a href="#在大涡模拟中" class="headerlink" title="在大涡模拟中"></a>在大涡模拟中</h3><p>$$v_{sgs}&#x3D;\left(C_{s}\Delta\right)^{2}\sqrt{2S_{ij}S_{ij}}$$</p><p>网格大小突然改变，会导致$v_{sgs}$突然改变</p><h3 id="在-RANS-中"><a href="#在-RANS-中" class="headerlink" title="在 RANS 中"></a>在 RANS 中</h3><p>使用至少3种不同的网格进行网格细化研究是非常必要的。</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240320153804905.png" alt="image-20240320153804905"></p><div class="note note-light">            <p><a href="https://www.youtube.com/watch?v=1gSHN99I7L4&list=PLnJ8lIgfDbkqaOdo-twtuco-qYahdAeG8">边界层理论</a></p>          </div><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="y-定义"><a href="#y-定义" class="headerlink" title="y+定义"></a><a href="https://www.simscale.com/forum/t/what-is-y-yplus/82394">y+定义</a></h3><p>根据y+的大小，可以将湍流边界层分为好多层。</p><ol><li>粘性子层($y^{+} &lt; 5$)：粘性影响占据主要地位，雷诺应力可忽略，则$u^{+} &#x3D; y^{+}$</li><li>对数区域($y^{+} &gt; 30$)：湍流应力占主导地位，$u^+&#x3D;\frac1\kappa ln(y^+)+B$，其中k&#x3D;0.41,B&#x3D;5.2</li><li>缓冲层($5 &lt; y^{+} &lt; 30$)：粘性应力和湍流应力的大小相近，由于该区域比较复杂，速度剖面的定义不明确，原始壁面函数会避开位于该区域的第一个单元中心。</li></ol><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240320162112.png" alt="The Law of the Wall"></p><p>壁面函数要求第一层网格尺寸$30&lt;y^{+}&lt;300$</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20240320164028.png" alt="y+应用"></p>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Openfoam自定义求解器</title>
    <link href="/2024/03/20/012%20Openfoam%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B1%82%E8%A7%A3%E5%99%A8/"/>
    <url>/2024/03/20/012%20Openfoam%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B1%82%E8%A7%A3%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1、求解器"><a href="#1、求解器" class="headerlink" title="1、求解器"></a>1、求解器</h1><h2 id="1-1-复制源码"><a href="#1-1-复制源码" class="headerlink" title="1.1 复制源码"></a>1.1 复制源码</h2><p>本案例以icoFoam为例，复制【openFOAM&#x2F;OpenFOAM-9&#x2F;applications&#x2F;solvers&#x2F;incompressible&#x2F;icoFoam】文件夹至run文件夹下（我的是【openFOAM&#x2F;mtl-9&#x2F;run&#x2F;solvers&#x2F;incompressible】）</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202306131700207.png" alt="image.png"></p><h2 id="1-2-修改名称"><a href="#1-2-修改名称" class="headerlink" title="1.2 修改名称"></a>1.2 修改名称</h2><p>将文件夹重新命名为【myIconFoam】<br><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202306131703290.png" alt="image.png"></p><p>修改该目录下的文件名称，为了便于分辨是自己的求解器，在源代码里输出一些内容</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614001149142.png" alt="image-20230614001149142"></p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202306131703091.png" alt="image.png"></p><h2 id="1-3-修改files"><a href="#1-3-修改files" class="headerlink" title="1.3 修改files"></a>1.3 修改files</h2><p>修改【Make&#x2F;files】</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202306131704567.png" alt="image.png"></p><p>注意：这里路径要改为【$(FOAM_USER_APPBIN)】，与之前【FOAM_USER_APPBIN】区别</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202306131705640.png" alt="image.png"></p><h2 id="1-4-编译"><a href="#1-4-编译" class="headerlink" title="1.4 编译"></a>1.4 编译</h2><p>输入【wmake】</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614001032908.png" alt="image-20230614001032908"></p><p>编译成功之后开始使用</p><h1 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h1><p>复制一份cavity案例</p><p>blockMesh划分网格</p><p>myIcoFoam求解</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614001314507.png" alt="image-20230614001314507"></p><h1 id="3、进阶"><a href="#3、进阶" class="headerlink" title="3、进阶"></a>3、进阶</h1><p>本案例修改icoFoam求解器，添加温度项。<br>$$\frac{\partial T}{\partial t} + \bigtriangledown \cdot (UT)-{\bigtriangledown }^2(D_{T}T)&#x3D;0$$</p><h2 id="3-1-修改源文件"><a href="#3-1-修改源文件" class="headerlink" title="3.1 修改源文件"></a>3.1 修改源文件</h2><p>添加以下代码，及上述方程</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614005652819.png" alt="image-20230614005652819"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">fvScalarMatrix <span class="hljs-title">TEqn</span></span><br><span class="hljs-function"><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    fvm::ddt(T) + fvm::div(phi, T) - fvm::laplacian(DT, T)</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br>TEqn.<span class="hljs-built_in">solve</span>();<br></code></pre></td></tr></table></figure><h2 id="3-2-修改场文件"><a href="#3-2-修改场文件" class="headerlink" title="3.2 修改场文件"></a>3.2 修改场文件</h2><p>新增以下有关温度项的代码</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614005903552.png" alt="image-20230614005903552"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++">IOdictionary myProperties <span class="hljs-comment">// 新增一个myProperties项</span><br>(<br>    <span class="hljs-built_in">IOobject</span><br>    (<br>        <span class="hljs-string">&quot;myProperties&quot;</span>,<br>        runTime.<span class="hljs-built_in">system</span>(), <span class="hljs-comment">// 存储在system文件夹下</span><br>        mesh,<br>        IOobject::MUST_READ_IF_MODIFIED,<br>        IOobject::NO_WRITE<br>    )<br>);<br><br>dimensionedScalar DT <span class="hljs-comment">// 定义一个变量DT，从myProperties中获取</span><br>(<br>    <span class="hljs-string">&quot;DT&quot;</span>,<br>    myProperties.<span class="hljs-built_in">lookup</span>(<span class="hljs-string">&quot;DT&quot;</span>)<br>);<br><br>Info&lt;&lt; <span class="hljs-string">&quot;Reading field T\n&quot;</span> &lt;&lt; endl;<br>volScalarField T <span class="hljs-comment">// 定义一个变量T</span><br>(<br>    <span class="hljs-built_in">IOobject</span><br>    (<br>        <span class="hljs-string">&quot;T&quot;</span>,<br>        runTime.<span class="hljs-built_in">timeName</span>(),<br>        mesh,<br>        IOobject::MUST_READ,<br>        IOobject::AUTO_WRITE<br>    ),<br>    mesh<br>);<br></code></pre></td></tr></table></figure><h2 id="3-3-编译"><a href="#3-3-编译" class="headerlink" title="3.3 编译"></a>3.3 编译</h2><p>修改完成之后，【wmake】编译</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614010106515.png" alt="image-20230614010106515"></p><h2 id="3-4-使用"><a href="#3-4-使用" class="headerlink" title="3.4 使用"></a>3.4 使用</h2><h3 id="3-4-1-初始条件"><a href="#3-4-1-初始条件" class="headerlink" title="3.4.1 初始条件"></a>3.4.1 初始条件</h3><p>复制p文件至T，改变名称、单位、初始值和边界条件</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614010203279.png" alt="image-20230614010203279"></p><h3 id="3-4-2-自定义属性"><a href="#3-4-2-自定义属性" class="headerlink" title="3.4.2 自定义属性"></a>3.4.2 自定义属性</h3><p>复制constant里的文件【transportProperties】文件至system，修改名称myProperties</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614010351434.png" alt="image-20230614010351434"></p><h3 id="3-4-3-新增离散格式"><a href="#3-4-3-新增离散格式" class="headerlink" title="3.4.3 新增离散格式"></a>3.4.3 新增离散格式</h3><p>新增div(phi,T)的离散格式</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614010458808.png" alt="image-20230614010458808"></p><h3 id="3-4-4-新增求解项"><a href="#3-4-4-新增求解项" class="headerlink" title="3.4.4 新增求解项"></a>3.4.4 新增求解项</h3><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614010607465.png" alt="image-20230614010607465"></p><h3 id="3-4-5-求解"><a href="#3-4-5-求解" class="headerlink" title="3.4.5 求解"></a>3.4.5 求解</h3><p>划分网格：blockMesh</p><p>求解：myIcoFoam</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20230614010711878.png" alt="image-20230614010711878"></p><p>完成</p>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Openfoam</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
      <tag>Openfoam</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯云+宝塔+Hexo搭建个人博客</title>
    <link href="/2024/03/19/011%20%E8%85%BE%E8%AE%AF%E4%BA%91+%E5%AE%9D%E5%A1%94+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/03/19/011%20%E8%85%BE%E8%AE%AF%E4%BA%91+%E5%AE%9D%E5%A1%94+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="1、服务器购买"><a href="#1、服务器购买" class="headerlink" title="1、服务器购买"></a>1、服务器购买</h1><p>我这里买的是腾讯云的轻量服务器，选择centos版本。<a href="https://cloud.tencent.com/act/pro/2024spring?from=21932">网站</a></p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318092649737.png" alt="image-20240318092649737"></p><p>购买完成可在服务器列表中查看</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318092813799.png" alt="image-20240318092813799"></p><p>点击服务器卡片上【更多】-【查看详情】，进入服务器。可先重置密码</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318092956444.png" alt="image-20240318092956444"></p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318093018683.png" alt="image-20240318093018683"></p><p>重置密码后点击【一键登录】</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318093052025.png" alt="image-20240318093052025"></p><h1 id="2、宝塔安装"><a href="#2、宝塔安装" class="headerlink" title="2、宝塔安装"></a>2、宝塔安装</h1><p>在终端输入宝塔的安装命令，<a href="https://www.bt.cn/new/download.html">宝塔安装</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec<br></code></pre></td></tr></table></figure><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318093320260.png" alt="image-20240318093320260"></p><p>如果出现以下提示说明需要管理员权限。终端输入<code>su</code>进入管理员权限，然后执行安装。</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318093436581.png" alt="image-20240318093436581"></p><p>安装好之后终端会显示宝塔访问端口号、账号和密码。输入【主机域名:端口号】进入宝塔面板，使用账号和密码登录。</p><h1 id="3、网站搭建"><a href="#3、网站搭建" class="headerlink" title="3、网站搭建"></a>3、网站搭建</h1><p>登录成功后，安装php推荐套餐</p><p>添加站点</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318110109451.png" alt="image-20240318110109451"></p><p>填写域名和网站的目录</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318110156648.png" alt="image-20240318110156648"></p><p>在文件下面会看到刚才的文件夹【<code>qlbai.fun</code>】，把里面的文件全部删除。（如果没有自己创建一下）</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318110239010.png" alt="image-20240318110239010"></p><p>把该文件夹下的全部文件删除，在本地博客目录下运行，生成public目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -g<br></code></pre></td></tr></table></figure><p>生成public目录后压缩一下，然后上传至宝塔解压缩</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318110424392.png" alt="image-20240318110424392"></p><p>然后启动项目</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240318110440540.png" alt="image-20240318110440540"></p><blockquote><p> 使用域名访问，需要先购买个域名，通过DNS解析到该主机地址上，还需要备案才能访问，过程就不演示了。</p></blockquote><h1 id="4、修改宝塔默认端口"><a href="#4、修改宝塔默认端口" class="headerlink" title="4、修改宝塔默认端口"></a>4、修改宝塔默认端口</h1><p>宝塔服务器使用的默认端口是80，则网站只能使用其他端口，在访问网站时就得在后面加端口号，很不方便。所以要修改服务器默认端口，这里改为1180，将网站的端口改为80。</p><p>进入<code>/www/server/panel/vhost/nginx/</code>文件夹下，可看到以下几个配置文件，</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240428161735189.png" alt="image-20240428161735189"></p><p>修改默认服务器配置文件<code>0.default.conf</code>，默认端口号为<code>1180</code></p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240428161827572.png" alt="image-20240428161827572"></p><p>修改<code>php</code>配置文件<code>phpfpm_status.conf</code>，默认端口号为<code>1180</code></p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240428161913605.png" alt="image-20240428161913605"></p><p>修改网站配置文件<code>qlbai.fun.conf</code>，默认端口号为<code>80</code></p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240428162009848.png" alt="image-20240428162009848"></p><p>之后需要在防火墙处打开<code>1180</code>端口号</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240428162220684.png" alt="image-20240428162220684"></p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20240428162228031.png" alt="image-20240428162228031"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享一些常用的UDF</title>
    <link href="/2024/03/17/010%20%E5%B8%B8%E7%94%A8%E7%9A%84udf/"/>
    <url>/2024/03/17/010%20%E5%B8%B8%E7%94%A8%E7%9A%84udf/</url>
    
    <content type="html"><![CDATA[<p>下面分享一些简单的udf，带领小白快速入门。</p><h1 id="1、Lee"><a href="#1、Lee" class="headerlink" title="1、Lee"></a>1、Lee</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sg_mphase.h&quot;</span>  <span class="hljs-comment">//包含体积分数的宏</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> T_SAT 30.27   <span class="hljs-comment">//饱和温度373.15 K</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LAT_HT 1.e3 <span class="hljs-comment">//汽化潜热1000 J/kg</span></span><br><br><br><span class="hljs-comment">// 液相质量源项</span><br>DEFINE_SOURCE(liq_src, cell, pri_th, dS, eqn)<br>&#123;<br> Thread *mix_th, *sec_th;<br> real m_dot_l;<span class="hljs-comment">// 定义相变质量kg/(m2 s)</span><br> <span class="hljs-comment">// mix_th存储主相的Thread指针；sec_th存储次相指针，注意ID</span><br> mix_th = THREAD_SUPER_THREAD(pri_th); <span class="hljs-comment">//指向混合区域的主相</span><br> sec_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">1</span>); <span class="hljs-comment">//指向单相区的气相指针</span><br> thi_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">2</span>); <span class="hljs-comment">//指向单相区的液相指针</span><br> <span class="hljs-comment">// 温度大于饱和温度，表示为蒸发</span><br> <span class="hljs-keyword">if</span> (C_T(cell, sec_th) &gt;= T_SAT)<br> &#123;<br>   <span class="hljs-comment">//计算蒸发量，注意液相质量流量为负值，0.1为coeff值</span><br>   m_dot_l = <span class="hljs-number">-0.25</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) * <span class="hljs-built_in">fabs</span>(C_T(cell, sec_th) - T_SAT) / T_SAT;<br>   <span class="hljs-comment">//对体积分数求导</span><br>   dS[eqn] = <span class="hljs-number">-0.25</span> * C_R(cell, sec_th) * <span class="hljs-built_in">fabs</span>(C_T(cell, sec_th) - T_SAT) / T_SAT;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>   <span class="hljs-comment">//计算冷凝量，液相质量分数为正值</span><br>   m_dot_l = <span class="hljs-number">0.1</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) * <span class="hljs-built_in">fabs</span>(T_SAT - C_T(cell, sec_th)) / T_SAT;<br>   <span class="hljs-comment">//若对体积分数求导得到的值为正，干脆直接赋零值</span><br>   dS[eqn] = <span class="hljs-number">0.</span>;<br> &#125;<br> <span class="hljs-keyword">return</span> m_dot_l;<br>&#125;<br><br><br><br><span class="hljs-comment">// 气相质量源项，解释同上</span><br>DEFINE_SOURCE(vap_src, cell, sec_th, dS, eqn)<br>&#123;<br> Thread *mix_th, *pri_th;<br> real m_dot_v;<br> mix_th = THREAD_SUPER_THREAD(pri_th); <span class="hljs-comment">//指向混合区域的主相</span><br> sec_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">1</span>); <span class="hljs-comment">//指向单相区的气相指针</span><br> thi_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">2</span>); <span class="hljs-comment">//指向单相区的液相指针</span><br> <span class="hljs-keyword">if</span> (C_T(cell, thi_th) &lt;= T_SAT)<br> &#123;<br>   m_dot_v = <span class="hljs-number">0.1</span> * C_VOF(cell,thi_th) * C_R(cell, thi_th) * <span class="hljs-built_in">fabs</span>(C_T(cell, thi_th) - T_SAT) / T_SAT;<br>   dS[eqn] = <span class="hljs-number">0.</span>;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>   m_dot_v = <span class="hljs-number">-0.1</span> * C_VOF(cell, thi_th) * C_R(cell, thi_th) * <span class="hljs-built_in">fabs</span>(T_SAT - C_T(cell, thi_th)) / T_SAT;<br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_R(cell, thi_th) * <span class="hljs-built_in">fabs</span>(C_T(cell, thi_th) - T_SAT) / T_SAT;<br> &#125;<br> <span class="hljs-keyword">return</span> m_dot_v;<br>&#125;<br><br><br><span class="hljs-comment">//混合相的能量源项</span><br>DEFINE_SOURCE(enrg_src, cell, mix_th, dS, eqn)<br>&#123;<br> Thread *pri_th, *sec_th, *thi_th;<br> real m_dot;<br> pri_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">0</span>);<br> sec_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">1</span>);<br> thi_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">2</span>);<br> <span class="hljs-keyword">if</span> (C_T(cell, mix_th) &gt;= T_SAT)<br> &#123;<br>   <span class="hljs-comment">// 得到蒸发量，Lee模型</span><br>   m_dot = <span class="hljs-number">-0.25</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) *<br>           <span class="hljs-built_in">fabs</span>(C_T(cell, sec_th) - T_SAT) / T_SAT;<br>   <span class="hljs-comment">//对温度求导，若为负则保留，否则赋值零</span><br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) / T_SAT;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>   <span class="hljs-comment">//得到冷凝量</span><br>   m_dot = <span class="hljs-number">0.1</span> * C_VOF(cell, thi_th) * C_R(cell, thi_th) *<br>           <span class="hljs-built_in">fabs</span>(T_SAT - C_T(cell, thi_th)) / T_SAT;<br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_VOF(cell, thi_th) * C_R(cell, thi_th) / T_SAT;<br> &#125;<br>   <br> <span class="hljs-comment">// 返回热量值，利用潜热与质量流量的乘积得到</span><br> <span class="hljs-keyword">return</span> LAT_HT * m_dot;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、ke模型"><a href="#2、ke模型" class="headerlink" title="2、ke模型"></a>2、ke模型</h1><h2 id="2-1-ke1"><a href="#2-1-ke1" class="headerlink" title="2.1 ke1"></a>2.1 ke1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Cu 0.09</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Us 2.2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> zs 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> a 0.15</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ZG 350</span><br><br>DEFINE_PROFILE(k_profile,t,i)<br>&#123;<br>real z,x[ND_ND],Uz,Iz;<br><span class="hljs-type">face_t</span> f;<br><br>begin_f_loop(f,t)<br>&#123;<br>F_CENTROID(x,f,t);<br>z = x[<span class="hljs-number">2</span>];<br>Uz = Us*<span class="hljs-built_in">pow</span>(z/zs,a);<br>Iz = <span class="hljs-number">0.1</span>*<span class="hljs-built_in">pow</span>(z/ZG,-a<span class="hljs-number">-0.05</span>);<br><br>F_PROFILE(f,t,i) = <span class="hljs-built_in">pow</span>(Iz*Uz,<span class="hljs-number">2</span>);<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br><br>DEFINE_PROFILE(e_profile,t,i)<br>&#123;<br>real z,x[ND_ND],Uz,Iz,kz;<br><span class="hljs-type">face_t</span> f;<br><br>begin_f_loop(f,t)<br>&#123;<br>F_CENTROID(x,f,t);<br>z = x[<span class="hljs-number">2</span>];<br>Uz = Us*<span class="hljs-built_in">pow</span>(z/zs,a);<br>Iz = <span class="hljs-number">0.1</span>*<span class="hljs-built_in">pow</span>(z/ZG,-a<span class="hljs-number">-0.05</span>);<br>kz = <span class="hljs-built_in">pow</span>(Iz*Uz,<span class="hljs-number">2</span>);<br><br>F_PROFILE(f,t,i) = <span class="hljs-built_in">pow</span>(Cu,<span class="hljs-number">0.5</span>)*kz*Us/zs*a*<span class="hljs-built_in">pow</span>(z/zs,a<span class="hljs-number">-1</span>);<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-ke2"><a href="#2-2-ke2" class="headerlink" title="2.2 ke2"></a>2.2 ke2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Cu 0.09</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Us 2.2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> zs 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> a 0.10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ZG 250</span><br><br>DEFINE_PROFILE(k_profile,t,i)<br>&#123;<br>real z,x[ND_ND],Uz,Iz;<br><span class="hljs-type">face_t</span> f;<br><br>begin_f_loop(f,t)<br>&#123;<br>F_CENTROID(x,f,t);<br>z = x[<span class="hljs-number">2</span>];<br>Uz = Us*<span class="hljs-built_in">pow</span>(z/zs,a);<br><span class="hljs-keyword">if</span>(z&lt;<span class="hljs-number">5</span>)<br>Iz = <span class="hljs-number">0.18</span>;<br><span class="hljs-keyword">else</span><br>Iz = <span class="hljs-number">0.1</span>*<span class="hljs-built_in">pow</span>(z/ZG,-a<span class="hljs-number">-0.05</span>);<br>F_PROFILE(f,t,i) = <span class="hljs-number">1.5</span>*<span class="hljs-built_in">pow</span>(Uz*Iz,<span class="hljs-number">2</span>);<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br><br>DEFINE_PROFILE(e_profile,t,i)<br>&#123;<br>real z,x[ND_ND],Uz,Iz,kz,lz;<br><span class="hljs-type">face_t</span> f;<br><br>begin_f_loop(f,t)<br>&#123;<br>F_CENTROID(x,f,t);<br>z = x[<span class="hljs-number">2</span>];<br>Uz = Us*<span class="hljs-built_in">pow</span>(z/zs,a);<br><span class="hljs-keyword">if</span>(z&lt;<span class="hljs-number">5</span>)<br>Iz = <span class="hljs-number">0.18</span>;<br><span class="hljs-keyword">else</span><br>Iz = <span class="hljs-number">0.1</span>*<span class="hljs-built_in">pow</span>(z/ZG,-a<span class="hljs-number">-0.05</span>);<br>kz = <span class="hljs-number">1.5</span>*<span class="hljs-built_in">pow</span>(Uz*Iz,<span class="hljs-number">2</span>);<br>F_PROFILE(f,t,i) = F_PROFILE(f,t,i) = <span class="hljs-built_in">pow</span>(Cu,<span class="hljs-number">0.5</span>)*kz*Us/zs*a*<span class="hljs-built_in">pow</span>(z/zs,a<span class="hljs-number">-1</span>);<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3、质量入口"><a href="#3、质量入口" class="headerlink" title="3、质量入口"></a>3、质量入口</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFINE_PROFILE(inlet_mlih2,thread,i)<br>&#123;<br><span class="hljs-type">face_t</span> f;<br>real flow_time = CURRENT_TIME;<br>begin_f_loop(f,thread)<br>&#123;<br><span class="hljs-keyword">if</span>(flow_time &lt;= <span class="hljs-number">38</span>)<br>F_PROFILE(f,thread,i) = <span class="hljs-number">4.76</span>*<span class="hljs-number">0.75</span>;<br><span class="hljs-keyword">else</span><br>F_PROFILE(f,thread,i) = <span class="hljs-number">0</span>;<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br>DEFINE_PROFILE(inlet_mh2,thread,i)<br>&#123;<br><span class="hljs-type">face_t</span> f;<br>real flow_time = CURRENT_TIME;<br>begin_f_loop(f,thread)<br>&#123;<br><span class="hljs-keyword">if</span>(flow_time &lt;= <span class="hljs-number">38</span>)<br>F_PROFILE(f,thread,i) = <span class="hljs-number">4.76</span>*<span class="hljs-number">0.25</span>;<br><span class="hljs-keyword">else</span><br>F_PROFILE(f,thread,i) = <span class="hljs-number">0</span>;<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、速度入口"><a href="#4、速度入口" class="headerlink" title="4、速度入口"></a>4、速度入口</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFINE_PROFILE(inlet_x,thread,index)<br>&#123;<br>real y,v0,h0;<br>real x[ND_ND];<br><span class="hljs-type">face_t</span> f;<br>v0=<span class="hljs-number">2.2</span>;<br>h0=<span class="hljs-number">10</span>;<br>begin_f_loop(f,thread)<br>&#123;<br>F_CENTROID(x,f,thread);<br>y=x[<span class="hljs-number">2</span>];<br>F_PROFILE(f,thread,index) = v0*<span class="hljs-built_in">pow</span>(y/h0,<span class="hljs-number">0.10</span>);<br>&#125;<br>end_f_loop(f,thread)<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5、时间步长"><a href="#5、时间步长" class="headerlink" title="5、时间步长"></a>5、时间步长</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br><br>DEFINE_DELTAT(mydeltat,domain)<br>&#123;<br>    real time_step;<br>    real flow_time = CURRENT_TIME;<br>    <span class="hljs-keyword">if</span>(flow_time&lt;<span class="hljs-number">120</span>)<br>        time_step = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        time_step = <span class="hljs-number">0.0005</span>;<br>    <span class="hljs-keyword">return</span> time_step;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Fluent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UDF</tag>
      
      <tag>Fluent</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UDF学习笔记</title>
    <link href="/2024/03/17/009%20UDF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/03/17/009%20UDF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>有时fluent自带的边界条件等不满足我们的需求，需要使用udf进行更改，比如一个泄漏口流量随时间变化。对于大多数没有编程基础的小伙伴来说，直接看fluent udf的官方文档比较吃力，花费大量的时间还找不到相关的函数。</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204081531095.png" alt="image-20220408153144869"></p><h2 id="1、UDF常见的循环宏"><a href="#1、UDF常见的循环宏" class="headerlink" title="1、UDF常见的循环宏"></a>1、UDF常见的循环宏</h2><p><strong>简写</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">d:：domin（指针）<br><br>ct,t：cell thread（指针）<br><br>ft,f_thread：face thread（指针）<br><br>c：cell thread（变量）<br><br>f：face thread（变量）<br></code></pre></td></tr></table></figure><h3 id="1-1-对域d中的所有单元循环"><a href="#1-1-对域d中的所有单元循环" class="headerlink" title="1.1 对域d中的所有单元循环"></a>1.1 对域d中的所有单元循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">thread_loop_f(ft,d) &#123;  &#125;;<br></code></pre></td></tr></table></figure><h3 id="1-2-对域d中的所有面thread循环"><a href="#1-2-对域d中的所有面thread循环" class="headerlink" title="1.2 对域d中的所有面thread循环"></a>1.2 对域d中的所有面thread循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">thread_loop_f(ft,d) &#123;  &#125;;<br></code></pre></td></tr></table></figure><h3 id="1-3-对thread-t中的所有单元循环"><a href="#1-3-对thread-t中的所有单元循环" class="headerlink" title="1.3 对thread t中的所有单元循环"></a>1.3 对thread t中的所有单元循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">begin_c_loop(c,t)<br>&#123;  &#125;<br>end_c_loop(c,t);<br></code></pre></td></tr></table></figure><h3 id="1-4-对面thread中所有面循环"><a href="#1-4-对面thread中所有面循环" class="headerlink" title="1.4 对面thread中所有面循环"></a>1.4 对面thread中所有面循环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">begin_f_loop(f,f_thread)<br>&#123;  &#125;<br>end_f_loop(f,f_thread)<br></code></pre></td></tr></table></figure><h2 id="2、相关案例"><a href="#2、相关案例" class="headerlink" title="2、相关案例"></a>2、相关案例</h2><h3 id="2-1-风速随高度变化"><a href="#2-1-风速随高度变化" class="headerlink" title="2.1 风速随高度变化"></a>2.1 风速随高度变化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFINE_PROFILE(inlet_x,thread,index)<br>&#123;<br>real y,v0,h0;<br>real x[ND_ND];<span class="hljs-comment">//用来存储质心坐标</span><br><span class="hljs-type">face_t</span> f;<br>v0=<span class="hljs-number">1</span>;<br>h0=<span class="hljs-number">2</span>;<br>begin_f_loop(f,thread)<br>&#123;<br>        <span class="hljs-comment">//这里传入的x是质心</span><br>F_CENTROID(x,f,thread);<span class="hljs-comment">//F_CENTROID 获得面中心的坐标</span><br>y=x[<span class="hljs-number">2</span>];<br>F_PROFILE(f,thread,index) = v0*<span class="hljs-built_in">pow</span>(y/h0,<span class="hljs-number">0.2</span>);<br>end_f_loop(f,thread)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-速度随时间变化"><a href="#2-2-速度随时间变化" class="headerlink" title="2.2 速度随时间变化"></a>2.2 速度随时间变化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFINE_PROFILE(inlet_V,thread,i)<br>&#123;<br><span class="hljs-type">face_t</span> f;<span class="hljs-comment">// 定义一个面f</span><br>real flow_time = CURRENT_TIME;<span class="hljs-comment">//定义一个实数flow_time获取当前时间</span><br>begin_f_loop(f,thread)<br>&#123;<br><span class="hljs-keyword">if</span>(flow_time &gt;=<span class="hljs-number">0</span> )<br>F_PROFILE(f,thread,i) = <span class="hljs-number">1.5</span>+<span class="hljs-number">0.5</span>*<span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span>*<span class="hljs-number">3.14159</span>*<span class="hljs-number">0.1</span>*flow_time);<br><span class="hljs-keyword">else</span><br>F_PROFILE(f,thread,i) = <span class="hljs-number">1.5</span>;<br>&#125;<br>end_f_loop(f,thread)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-压力随着高度变化"><a href="#2-3-压力随着高度变化" class="headerlink" title="2.3 压力随着高度变化"></a>2.3 压力随着高度变化</h3><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204021506327.png" alt="image-20220402150600314"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br><br>DEFINE_PROFILE(pressure_profile,t,i)<br>&#123;<br>   real x[ND_ND];<br>   real y;<br>   <span class="hljs-type">face_t</span> f;<br>   begin_f_loop(f,t)<br>   &#123;<br>       F_CENTROID(X,f,t);<span class="hljs-comment">//F_CENTROID 获得面中心的坐标，用来计算每个面的压力</span><br>       y = x[<span class="hljs-number">1</span>];<span class="hljs-comment">// 获取y数值，0表示x，1表示y，2表示z</span><br>       F_FPOFILE(f,t,i) = <span class="hljs-number">1.1e5</span> - y*y/(<span class="hljs-number">.0745</span>*<span class="hljs-number">.0745</span>)*<span class="hljs-number">0.1e5</span>;<br>   &#125;<br>   end_f_loop(f,t)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-材料属性随温度变化"><a href="#2-4-材料属性随温度变化" class="headerlink" title="2.4 材料属性随温度变化"></a>2.4 材料属性随温度变化</h3><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204021508615.png" alt="image-20220402150830581"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFILE_PROPERTY(steel_heat,c,t)<br>&#123;<br>real <span class="hljs-type">s_t</span>;<br>real = Tk = C_T(c,t);<span class="hljs-comment">//读取当前的温度</span><br><span class="hljs-keyword">if</span>(Tk&lt;=<span class="hljs-number">273.15</span>)<br><span class="hljs-type">s_t</span> = <span class="hljs-number">14</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Tk&lt;=<span class="hljs-number">1273.15</span>)<br><span class="hljs-type">s_t</span> = <span class="hljs-number">14</span>-(Tk<span class="hljs-number">-273.15</span>)*<span class="hljs-number">0.004</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-type">s_t</span> = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-type">s_t</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204021524675.png" alt="image-20220402152435617"></p><h3 id="2-5-质量流量随时间变化"><a href="#2-5-质量流量随时间变化" class="headerlink" title="2.5 质量流量随时间变化"></a>2.5 质量流量随时间变化</h3><p>以下名为INTERT_MF的UDF最初指定前10毫秒的质量流量为3.0千克&#x2F;秒，然后在接下来的10毫秒内将其增加到4.0千克&#x2F;秒，之后指定5.0千克&#x2F;秒。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br>DEFINE_PROFILE(inlet_mf,th,i)<br>&#123;<br><span class="hljs-type">face_t</span> f;<br>real flow_time = CURRENT_TIME;<span class="hljs-comment">/*查找当前流动的时间*/</span><br>begin_f_loop(f,th)<br>&#123;<br><span class="hljs-keyword">if</span>(flow_time &lt;= <span class="hljs-number">0.01</span>)<br>F_PROFILE(f,th,i) = <span class="hljs-number">3.0</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(flow_time &lt;= <span class="hljs-number">0.02</span>)<br>F_PROFILE(f,th,i) = <span class="hljs-number">4.0</span>;<br><span class="hljs-keyword">else</span><br>F_PROFILE(f,th,i) = <span class="hljs-number">5.0</span>;<br>&#125;<br>end_f_loop(f,th);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-时间步长的改变"><a href="#2-6-时间步长的改变" class="headerlink" title="2.6 时间步长的改变"></a>2.6 时间步长的改变</h3><p>DEFINE_DELTAT</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">DEFINE <span class="hljs-title function_">DELTAT</span> <span class="hljs-params">(mydeltat,d)</span><br>&#123;<br>    real time_step;<br>    real flow_time = CURRENT_TIME;<br>    <span class="hljs-keyword">if</span> (flow_time <span class="hljs-number">0.5</span>)<br>        time_step = <span class="hljs-number">0.1</span>;<br>    <span class="hljs-keyword">else</span><br>        time_step = <span class="hljs-number">0.2</span>;<br>    <span class="hljs-keyword">return</span> time_step;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-7-蒸发冷凝模型源相"><a href="#2-7-蒸发冷凝模型源相" class="headerlink" title="2.7 蒸发冷凝模型源相"></a>2.7 蒸发冷凝模型源相</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;udf.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sg_mphase.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> T_SAT 373.15   <span class="hljs-comment">//饱和温度373.15 K</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LAT_HT 1.e3 <span class="hljs-comment">//汽化潜热1000 J/kg</span></span><br><span class="hljs-comment">// 液相质量源项</span><br>DEFINE_SOURCE(liq_src, cell, pri_th, dS, eqn)<br>&#123;<br> Thread *mix_th, *sec_th;<br> real m_dot_l;<br> <span class="hljs-comment">// mix_th存储主相的Thread指针；sec_th存储次相指针，注意ID</span><br> mix_th = THREAD_SUPER_THREAD(pri_th);<br> sec_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">1</span>);<br> <span class="hljs-comment">// 温度大于饱和温度，表示为蒸发</span><br> <span class="hljs-keyword">if</span> (C_T(cell, mix_th) &gt;= T_SAT)<br> &#123;<br>   <span class="hljs-comment">//计算蒸发量，注意液相质量流量为负值，0.1为coeff值</span><br>   m_dot_l = <span class="hljs-number">-0.1</span> * C_VOF(cell, pri_th) * C_R(cell, pri_th) *<br>             <span class="hljs-built_in">fabs</span>(C_T(cell, pri_th) - T_SAT) / T_SAT;<br>   <span class="hljs-comment">//对体积分数求导</span><br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_R(cell, pri_th) *<br>             <span class="hljs-built_in">fabs</span>(C_T(cell, pri_th) - T_SAT) / T_SAT;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>   <span class="hljs-comment">//计算冷凝量，液相质量分数为正值</span><br>   m_dot_l = <span class="hljs-number">0.1</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) *<br>             <span class="hljs-built_in">fabs</span>(T_SAT - C_T(cell, mix_th)) / T_SAT;<br>   <span class="hljs-comment">//若对体积分数求导得到的值为正，干脆直接赋零值</span><br>   dS[eqn] = <span class="hljs-number">0.</span>;<br> &#125;<br> <span class="hljs-keyword">return</span> m_dot_l;<br>&#125;<br><span class="hljs-comment">// 气相质量源项，解释同上</span><br>DEFINE_SOURCE(vap_src, cell, sec_th, dS, eqn)<br>&#123;<br> Thread *mix_th, *pri_th;<br> real m_dot_v;<br> mix_th = THREAD_SUPER_THREAD(sec_th);<br> pri_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">0</span>);<br> <span class="hljs-keyword">if</span> (C_T(cell, mix_th) &gt;= T_SAT)<br> &#123;<br>   m_dot_v = <span class="hljs-number">0.1</span> * C_VOF(cell, pri_th) * C_R(cell, pri_th) *<br>             <span class="hljs-built_in">fabs</span>(C_T(cell, mix_th) - T_SAT) / T_SAT;<br>   dS[eqn] = <span class="hljs-number">0.</span>;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>   m_dot_v = <span class="hljs-number">-0.1</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) *<br>             <span class="hljs-built_in">fabs</span>(T_SAT - C_T(cell, mix_th)) / T_SAT;<br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_R(cell, sec_th) *<br>             <span class="hljs-built_in">fabs</span>(C_T(cell, sec_th) - T_SAT) / T_SAT;<br> &#125;<br> <span class="hljs-keyword">return</span> m_dot_v;<br>&#125;<br><span class="hljs-comment">//混合相的能量源项</span><br>DEFINE_SOURCE(enrg_src, cell, mix_th, dS, eqn)<br>&#123;<br> Thread *pri_th, *sec_th;<br> real m_dot;<br> pri_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">0</span>);<br> sec_th = THREAD_SUB_THREAD(mix_th, <span class="hljs-number">1</span>);<br> <span class="hljs-keyword">if</span> (C_T(cell, mix_th) &gt;= T_SAT)<br> &#123;<br>   <span class="hljs-comment">// 得到蒸发量，Lee模型</span><br>   m_dot = <span class="hljs-number">-0.1</span> * C_VOF(cell, pri_th) * C_R(cell, pri_th) *<br>           <span class="hljs-built_in">fabs</span>(C_T(cell, pri_th) - T_SAT) / T_SAT;<br>   <span class="hljs-comment">//对温度求导，若为负则保留，否则赋值零</span><br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_VOF(cell, pri_th) * C_R(cell, pri_th) / T_SAT;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>   <span class="hljs-comment">//得到冷凝量</span><br>   m_dot = <span class="hljs-number">0.1</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) *<br>           <span class="hljs-built_in">fabs</span>(T_SAT - C_T(cell, mix_th)) / T_SAT;<br>   dS[eqn] = <span class="hljs-number">-0.1</span> * C_VOF(cell, sec_th) * C_R(cell, sec_th) / T_SAT;<br> &#125;<br>   <br> <span class="hljs-comment">// 返回热量值，利用潜热与质量流量的乘积得到</span><br> <span class="hljs-keyword">return</span> LAT_HT * m_dot;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、函数"><a href="#3、函数" class="headerlink" title="3、函数"></a>3、函数</h2><h3 id="3-1-DEFINE-PROFILE"><a href="#3-1-DEFINE-PROFILE" class="headerlink" title="3.1 DEFINE_PROFILE"></a>3.1 DEFINE_PROFILE</h3><ol><li><p>使用DEFINE_PROFILE定义一个<strong>自定义边界配置文件</strong>，该边界配置文件随空间坐标或时间的函数而变化。</p></li><li><p>边界的变量可以是速度、压力、温度、湍流动能、湍流耗散率、质量流率等（见手册2.3.17）</p></li></ol><p>用法<code>DEFINE_PROFILE (name,t,i)</code></p><p>thread *t：指向要应用边界条件的线程的指针。</p><p>int i：标识要定义的变量的索引。</p><h3 id="3-2-DEFILE-PROPERTY"><a href="#3-2-DEFILE-PROPERTY" class="headerlink" title="3.2 DEFILE_PROPERTY"></a>3.2 DEFILE_PROPERTY</h3><ol><li><p>定义材料的属性</p></li><li><p>可以是密度、粘度、热导率、吸收和扩散系数、层流火焰速度、应变率等</p></li></ol><p><strong>对于多相流</strong></p><p>传热系数（Mixture）、颗粒或液滴直径（Mixture）</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204021517069.png" alt="image-20220402151729022"></p><p><strong>用法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">DEFILE_PROPERTY(name,c,t)<br></code></pre></td></tr></table></figure><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204021518094.png" alt="image-20220402151838068"></p><h2 id="4、常用宏"><a href="#4、常用宏" class="headerlink" title="4、常用宏"></a>4、常用宏</h2><h3 id="4-1-流场变量宏"><a href="#4-1-流场变量宏" class="headerlink" title="4.1 流场变量宏"></a>4.1 流场变量宏</h3><table><thead><tr><th align="center">C_R(c,t)</th><th align="center">密度（Density）</th></tr></thead><tbody><tr><td align="center">C_P(c,t)</td><td align="center">压力（Pressure）</td></tr><tr><td align="center">C_U(c,t)</td><td align="center">x方向速度（U-velocity）</td></tr><tr><td align="center">C_V(c,t)</td><td align="center">y方向速度（V-velocity）</td></tr><tr><td align="center">C_W(c,t)</td><td align="center">z方向速度（W-velocity）</td></tr><tr><td align="center">C_T(c,t)</td><td align="center">温度（Temperature）</td></tr><tr><td align="center">C_H(c,t)</td><td align="center">焓（Enthalpy）</td></tr></tbody></table><p>其他</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204081421298.png" alt="image-20220408142156047"></p><h3 id="4-2-几何和时间宏"><a href="#4-2-几何和时间宏" class="headerlink" title="4.2 几何和时间宏"></a>4.2 几何和时间宏</h3><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202204081424561.png" alt="image-20220408142424531"></p><p>CURRENT_TIME；获取当前模拟时间的值；</p>]]></content>
    
    
    <categories>
      
      <category>模拟</category>
      
      <category>Fluent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UDF</tag>
      
      <tag>Fluent</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式（c++版本）</title>
    <link href="/2024/03/17/002%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/03/17/002%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/baiqinglun/cpp_designPatten">github地址</a></p><h2 id="1、工厂模式"><a href="#1、工厂模式" class="headerlink" title="1、工厂模式"></a>1、工厂模式</h2><h3 id="1-1-简单工厂"><a href="#1-1-简单工厂" class="headerlink" title="1.1 简单工厂"></a>1.1 简单工厂</h3><ol><li>定义一个图形抽象类,类中添加绘制图形的纯虚函数,球形类和长方体继承该图形抽象类,并重写纯虚函数.</li><li>定义一个工厂Factory用于创建图形.工厂中有个create函数可以根据传入的参数new一个相应的图形并返回.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/2.</span><br><span class="hljs-comment"> * 简单工厂模式</span><br><span class="hljs-comment"> * 1. 定义一个图形抽象类,类中添加绘制图形的纯虚函数,球形类和长方体继承该图形抽象类,并重写纯虚函数.</span><br><span class="hljs-comment"> * 2. 定义一个工厂Factory用于创建图形.工厂中有个create函数可以根据传入的参数new一个相应的图形并返回.</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">GRAPHICS_TYPE</span>&#123;<br>    SPHERE,<br>    CUBE<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graphics</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 球形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sphere</span> : <span class="hljs-keyword">public</span> Graphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制球形&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 长方体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cube</span> : <span class="hljs-keyword">public</span> Graphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制长方体&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">static</span> Graphics* <span class="hljs-title">createGraphics</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> GRAPHICS_TYPE type)</span></span>&#123;<br>        <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> SPHERE:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Sphere;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> CUBE:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Cube;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Graphics* graphics = Factory::<span class="hljs-built_in">createGraphics</span>(GRAPHICS_TYPE::SPHERE);<br>    graphics-&gt;<span class="hljs-built_in">painter</span>();<br>    graphics = Factory::<span class="hljs-built_in">createGraphics</span>(GRAPHICS_TYPE::CUBE);<br>    graphics-&gt;<span class="hljs-built_in">painter</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 绘制球形</span><br><span class="hljs-comment">// 绘制长方体</span><br><br></code></pre></td></tr></table></figure><h3 id="1-2-工厂方法模式"><a href="#1-2-工厂方法模式" class="headerlink" title="1.2 工厂方法模式"></a>1.2 工厂方法模式</h3><p>简单工厂每次新增创建图形类，就需要修改Factory工厂的创建方法,违反了开放开放封闭原则。</p><p>使用工厂模式为每个图形添加一个工厂。</p><ol><li>定义一个图形抽象类,类中添加绘制图形的纯虚函数,球形类和长方体继承该图形抽象类,并重写纯虚函数.</li><li>定义一个抽象工厂Factory，纯虚函数创建图形.创建球形工厂和创建长方体工厂继承自该工厂。并重写纯虚函数。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/2.</span><br><span class="hljs-comment"> * 工厂方法模式</span><br><span class="hljs-comment"> * 简单工厂每次新增创建图形类，就需要修改Factory工厂的创建方法,违反了开放开放封闭原则。</span><br><span class="hljs-comment"> * 1. 定义一个图形抽象类,类中添加绘制图形的纯虚函数,球形类和长方体继承该图形抽象类,并重写纯虚函数.</span><br><span class="hljs-comment"> * 2. 定义一个抽象工厂Factory，纯虚函数创建图形.创建球形工厂和创建长方体工厂继承自该工厂。并重写纯虚函数。</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graphics</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 球形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sphere</span> : <span class="hljs-keyword">public</span> Graphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制球形&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 长方体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cube</span> : <span class="hljs-keyword">public</span> Graphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制长方体&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Graphics* <span class="hljs-title">createGraphics</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SphereFactory</span> : <span class="hljs-keyword">public</span> Factory&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Graphics * <span class="hljs-title">createGraphics</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Sphere;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CubeFactory</span> : <span class="hljs-keyword">public</span> Factory&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">Graphics * <span class="hljs-title">createGraphics</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Cube;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Graphics* graphics;<br>    SphereFactory sphereFactory;<br>    graphics = sphereFactory.<span class="hljs-built_in">createGraphics</span>();<br>    graphics-&gt;<span class="hljs-built_in">painter</span>();<br>    CubeFactory cubeFactory;<br>    graphics = cubeFactory.<span class="hljs-built_in">createGraphics</span>();<br>    graphics-&gt;<span class="hljs-built_in">painter</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 绘制球形</span><br><span class="hljs-comment">// 绘制长方体</span><br><br></code></pre></td></tr></table></figure><h3 id="1-3-抽象工厂"><a href="#1-3-抽象工厂" class="headerlink" title="1.3 抽象工厂"></a>1.3 抽象工厂</h3><p>是工厂方法模式的一种演变。有时候我们需要创建静态或者会动的球形或者长方体，抽象工厂应运而生。</p><ol><li>定义一个图形抽象类,类中添加绘制图形的纯虚函数,球形类和长方体继承该图形抽象类,并重写纯虚函数.</li><li>定义一个抽象工厂Factory，纯虚函数创建图形.创建球形工厂和创建长方体工厂继承自该工厂。并重写纯虚函数。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/2.</span><br><span class="hljs-comment"> * 抽象工厂方法</span><br><span class="hljs-comment"> * 是工厂方法模式的一种演变。有时候我们需要创建静态或者会动的球形或者长方体，抽象工厂应运而生。</span><br><span class="hljs-comment"> * 1. 定义一个图形抽象类,类中添加绘制图形的纯虚函数,球形类和长方体继承该图形抽象类,并重写纯虚函数.</span><br><span class="hljs-comment"> * 2. 定义一个抽象工厂Factory，纯虚函数创建图形.创建球形工厂和创建长方体工厂继承自该工厂。并重写纯虚函数。</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span></span><br><br><span class="hljs-comment">// 静态图形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticGraphics</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">// 球形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticSphere</span> : <span class="hljs-keyword">public</span> StaticGraphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制静态球体&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 长方体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticCube</span> : <span class="hljs-keyword">public</span> StaticGraphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制静态长方体&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 动态图形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicGraphics</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">// 球形</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicSphere</span> : <span class="hljs-keyword">public</span> DynamicGraphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制动态球体&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 长方体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicCube</span> : <span class="hljs-keyword">public</span> DynamicGraphics&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">painter</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;绘制动态长方体&quot;</span>&lt;&lt;std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 工厂方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> StaticGraphics* <span class="hljs-title">createStaticGraphics</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> DynamicGraphics* <span class="hljs-title">createDynamicGraphics</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">// 球体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SphereFactory</span> : <span class="hljs-keyword">public</span> Factory&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">StaticGraphics * <span class="hljs-title">createStaticGraphics</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StaticSphere;<br>    &#125;<br>    <span class="hljs-function">DynamicGraphics * <span class="hljs-title">createDynamicGraphics</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DynamicSphere;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 长方体</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CubeFactory</span> : <span class="hljs-keyword">public</span> Factory&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">StaticGraphics * <span class="hljs-title">createStaticGraphics</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> StaticCube;<br>    &#125;<br>    <span class="hljs-function">DynamicGraphics * <span class="hljs-title">createDynamicGraphics</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DynamicCube;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">// 定义工厂和图形</span><br>    SphereFactory sphereFactory;<br>    CubeFactory cubeFactory;<br>    StaticGraphics* staticGraphics;<br>    DynamicGraphics* dynamicGraphics;<br><br>    <span class="hljs-comment">// 创建球体</span><br>    staticGraphics = sphereFactory.<span class="hljs-built_in">createStaticGraphics</span>();<br>    dynamicGraphics = sphereFactory.<span class="hljs-built_in">createDynamicGraphics</span>();<br>    staticGraphics-&gt;<span class="hljs-built_in">painter</span>();<br>    dynamicGraphics-&gt;<span class="hljs-built_in">painter</span>();<br><br>    <span class="hljs-comment">// 创建长方体</span><br>    staticGraphics = cubeFactory.<span class="hljs-built_in">createStaticGraphics</span>();<br>    dynamicGraphics = cubeFactory.<span class="hljs-built_in">createDynamicGraphics</span>();<br>    staticGraphics-&gt;<span class="hljs-built_in">painter</span>();<br>    dynamicGraphics-&gt;<span class="hljs-built_in">painter</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// 绘制静态球体</span><br><span class="hljs-comment">// 绘制动态球体</span><br><span class="hljs-comment">// 绘制静态长方体</span><br><span class="hljs-comment">// 绘制动态长方体</span><br><br></code></pre></td></tr></table></figure><h2 id="2、策略模式"><a href="#2、策略模式" class="headerlink" title="2、策略模式"></a>2、策略模式</h2><p>将一个类的行为委托给另一个类实现。</p><p><strong>策略模式是指定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换</strong>。<br>这里以Cache中的替换算法举例。本案例中Cache中replaceAlgorithm不自己实现，通过其他算法类实现。</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230402154638.png" alt="image.png"></p><p>1、定义算法类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReplaceAlgorithm</span>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">replace</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;  <br>&#125;;  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FIFO_ReplaceAlgorithm</span> : <span class="hljs-keyword">public</span> ReplaceAlgorithm&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replace</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;  <br>        std::cout &lt;&lt; <span class="hljs-string">&quot;FIFO_ReplaceAlgorithm被调用&quot;</span> &lt;&lt; std::endl;  <br>    &#125;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRU_ReplaceAlgorithm</span> : <span class="hljs-keyword">public</span> ReplaceAlgorithm&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replace</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;  <br>        std::cout &lt;&lt; <span class="hljs-string">&quot;LRU_ReplaceAlgorithm被调用&quot;</span> &lt;&lt; std::endl;  <br>    &#125;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Random_ReplaceAlgorithm</span> : <span class="hljs-keyword">public</span> ReplaceAlgorithm&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replace</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;  <br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Random_ReplaceAlgorithm被调用&quot;</span> &lt;&lt; std::endl;  <br>    &#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><p>实现Cache调用上述算法有3种方法</p><ul><li>构造函数传入算法对象；</li><li>构造函数传入算法类型，在构造函数中new一个算法；</li><li>避免传入参数，使用模板实现。</li></ul><p>方法一</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 方法一  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span>&#123;  <br><span class="hljs-keyword">private</span>:  <br>    ReplaceAlgorithm *m_ra;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Cache</span>(ReplaceAlgorithm *ra):<span class="hljs-built_in">m_ra</span>(ra)&#123;&#125;;  <br>    ~<span class="hljs-built_in">Cache</span>()&#123;  <br>        <span class="hljs-keyword">delete</span> m_ra;  <br>    &#125;;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replaceAlgorithm</span><span class="hljs-params">()</span></span>&#123;  <br>        m_ra-&gt;<span class="hljs-built_in">replace</span>();  <br>    &#125;  <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-function">Cache <span class="hljs-title">cache</span><span class="hljs-params">(<span class="hljs-keyword">new</span> FIFO_ReplaceAlgorithm())</span></span>;  <br>   <span class="hljs-function">Cache <span class="hljs-title">cache1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> LRU_ReplaceAlgorithm())</span></span>;  <br>   <span class="hljs-function">Cache <span class="hljs-title">cache2</span><span class="hljs-params">(<span class="hljs-keyword">new</span> Random_ReplaceAlgorithm())</span></span>;  <br>   cache.<span class="hljs-built_in">replaceAlgorithm</span>();  <br>   cache1.<span class="hljs-built_in">replaceAlgorithm</span>();  <br>   cache2.<span class="hljs-built_in">replaceAlgorithm</span>();  <br><span class="hljs-comment">// 输出  </span><br><span class="hljs-comment">// FIFO_ReplaceAlgorithm被调用  </span><br><span class="hljs-comment">// LRU_ReplaceAlgorithm被调用  </span><br><span class="hljs-comment">// Random_ReplaceAlgorithm被调用</span><br>&#125;<br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">ALGORITHM_TYPE</span>&#123;  <br>    FIFO,  <br>    LRU,  <br>    RANDOM  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span>&#123;  <br><span class="hljs-keyword">private</span>:  <br>    ReplaceAlgorithm *m_ra;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Cache</span>(<span class="hljs-keyword">enum</span> ALGORITHM_TYPE type)&#123;  <br>        <span class="hljs-keyword">switch</span> (type) &#123;  <br>            <span class="hljs-keyword">case</span> FIFO:  <br>                m_ra = <span class="hljs-keyword">new</span> FIFO_ReplaceAlgorithm;  <br>                <span class="hljs-keyword">break</span>;  <br>            <span class="hljs-keyword">case</span> LRU:  <br>                m_ra = <span class="hljs-keyword">new</span> LRU_ReplaceAlgorithm;  <br>                <span class="hljs-keyword">break</span>;  <br>            <span class="hljs-keyword">case</span> RANDOM:  <br>                m_ra = <span class="hljs-keyword">new</span> Random_ReplaceAlgorithm;  <br>                <span class="hljs-keyword">break</span>;  <br>            <span class="hljs-keyword">default</span>:  <br>                m_ra = <span class="hljs-literal">nullptr</span>;  <br>        &#125;    &#125;;<br>    ~<span class="hljs-built_in">Cache</span>()&#123;  <br>        <span class="hljs-keyword">delete</span> m_ra;  <br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replaceAlgorithm</span><span class="hljs-params">()</span></span>&#123;  <br>        m_ra-&gt;<span class="hljs-built_in">replace</span>();  <br>    &#125;<br>&#125;;<br>    <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    方法二  <br>   <span class="hljs-function">Cache <span class="hljs-title">cache</span><span class="hljs-params">(ALGORITHM_TYPE::FIFO)</span></span>;  <br>   cache.<span class="hljs-built_in">replaceAlgorithm</span>();  <br>   <span class="hljs-function">Cache <span class="hljs-title">cache1</span><span class="hljs-params">(ALGORITHM_TYPE::LRU)</span></span>;  <br>   cache1.<span class="hljs-built_in">replaceAlgorithm</span>();  <br>   <span class="hljs-function">Cache <span class="hljs-title">cache2</span><span class="hljs-params">(ALGORITHM_TYPE::RANDOM)</span></span>;  <br>   cache2.<span class="hljs-built_in">replaceAlgorithm</span>();  <br><span class="hljs-comment">// 输出  </span><br><span class="hljs-comment">// FIFO_ReplaceAlgorithm被调用  </span><br><span class="hljs-comment">// LRU_ReplaceAlgorithm被调用  </span><br><span class="hljs-comment">// Random_ReplaceAlgorithm被调用</span><br>&#125;<br></code></pre></td></tr></table></figure><p>方法三</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">RA</span>&gt;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span>&#123;  <br><span class="hljs-keyword">private</span>:  <br>    RA m_ra;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Cache</span>()&#123;&#125;;  <br>    ~<span class="hljs-built_in">Cache</span>()&#123;&#125;;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replaceAlgorithm</span><span class="hljs-params">()</span></span>&#123;  <br>        m_ra.<span class="hljs-built_in">replace</span>();  <br>    &#125;  <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>Cache&lt;FIFO_ReplaceAlgorithm&gt; cache;  <br>cache.<span class="hljs-built_in">replaceAlgorithm</span>();  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里需要注意，使用这一种方法时，m_ra不能是一个指针，写成指针的形式，只是将FIFO_ReplaceAlgorithm传入过来，并没有实例化对象。如果非要写成指针形式，需要自己new对象。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">RA</span>&gt;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span>&#123;  <br><span class="hljs-keyword">private</span>:  <br>    RA *m_ra = <span class="hljs-keyword">new</span> RA;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Cache</span>()&#123;&#125;;  <br>    ~<span class="hljs-built_in">Cache</span>()&#123;&#125;;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">replaceAlgorithm</span><span class="hljs-params">()</span></span>&#123;  <br>        m_ra-:&gt;<span class="hljs-built_in">replace</span>();  <br>    &#125;  <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>Cache&lt;FIFO_ReplaceAlgorithm&gt; cache;  <br>cache.<span class="hljs-built_in">replaceAlgorithm</span>();  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、适配器模式"><a href="#3、适配器模式" class="headerlink" title="3、适配器模式"></a>3、适配器模式</h2><p>C++适配器模式（Adapter Pattern）是一种结构型设计模式，它允许将不兼容的接口转换为客户端希望的接口。<br>适配器模式通常使用在以下场景：</p><ol><li>当<strong>已有的类</strong>无法满足客户端的需求时，可以使用适配器模式<strong>对已有类的接口进行转换</strong>，以满足客户端的需求。</li><li>当需要使用某个类，但该类的接口与另一个类的接口不兼容时，可以使用适配器模式进行转换。</li></ol><p>适配器模式通常包含以下角色：</p><ol><li>目标接口（Target）：客户端希望使用的接口。</li><li>源接口（Adaptee）：已有的接口，需要被转换。</li><li>适配器（Adapter）：实现目标接口，并通过调用源接口的方法，实现目标接口与源接口的适配</li></ol><p>适配器模式可以分为类适配器模式和对象适配器模式：</p><ol><li>类适配器模式：使用继承的方式实现适配器。</li><li>对象适配器模式：使用组合的方式实现适配器。</li></ol><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230402170122.png" alt="image.png"><br><strong>代码示例</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*  </span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/2. * 适配器模式  </span><br><span class="hljs-comment"> * 适配器模式（Adapter Pattern）是一种结构型设计模式，它允许将不兼容的接口转换为客户端希望的接口。  </span><br><span class="hljs-comment"> * STL实现了一种数据结构，称为双端队列（deque），支持前后两段的插入与删除。STL实现栈和队列时，没有从头开始定义它们，而是直接使用双端队列实现的。  </span><br><span class="hljs-comment"> * 这里双端队列就扮演了适配器的角色。队列用到了它的后端插入，前端删除。而栈用到了它的后端插入，后端删除。  </span><br><span class="hljs-comment"> * */</span>  <br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iostream&quot;</span>  </span><br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Deque</span>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;  <br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Deque push_back&quot;</span> &lt;&lt; std::endl;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_front</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;  <br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Deque push_front&quot;</span> &lt;&lt; std::endl;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_back</span><span class="hljs-params">()</span></span>&#123;  <br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Deque pop_back&quot;</span> &lt;&lt; std::endl;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_front</span><span class="hljs-params">()</span></span>&#123;  <br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Deque pop_front&quot;</span> &lt;&lt; std::endl;  <br>    &#125;  <br>&#125;;  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sequence</span>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>= <span class="hljs-number">0</span>;  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span> : <span class="hljs-keyword">public</span> Sequence&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-keyword">override</span></span>&#123;  <br>        deque.<span class="hljs-built_in">push_back</span>(x);  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;  <br>        deque.<span class="hljs-built_in">pop_back</span>();  <br>    &#125;;  <br><span class="hljs-keyword">private</span>:  <br>    Deque deque;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span> : <span class="hljs-keyword">public</span> Sequence&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-keyword">override</span></span>&#123;  <br>        deque.<span class="hljs-built_in">push_front</span>(x);  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span>&#123;  <br>        deque.<span class="hljs-built_in">pop_front</span>();  <br>    &#125;;  <br><span class="hljs-keyword">private</span>:  <br>    Deque deque;  <br>&#125;;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;  <br>    Sequence *s1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Stack</span>();  <br>    Sequence *s2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Queue</span>();  <br>    s1-&gt;<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);  <br>    s1-&gt;<span class="hljs-built_in">pop</span>();  <br>    s2-&gt;<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);  <br>    s2-&gt;<span class="hljs-built_in">pop</span>();  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;  <br>  <br><span class="hljs-comment">// 输出  </span><br><span class="hljs-comment">// Deque push_back  </span><br><span class="hljs-comment">// Deque pop_back  </span><br><span class="hljs-comment">// Deque push_front  </span><br><span class="hljs-comment">// Deque pop_front</span><br></code></pre></td></tr></table></figure><h2 id="4、单例模式"><a href="#4、单例模式" class="headerlink" title="4、单例模式"></a>4、单例模式</h2><p>单例模式是一种常见的软件设计模式，它保证<em>一个类只有一个实例</em>，并且提供一个全局访问点来访问该实例。</p><p>在单例模式中，通常会将类的构造函数私有化，以避免外部代码直接创建该类的对象实例。同时，该类会定义一个静态方法或静态成员变量来访问类的唯一实例。如果该实例不存在，则该静态方法或成员变量会创建一个新的实例，并返回该实例；如果实例已经存在，则直接返回该实例。</p><p>单例模式的优点是：</p><ol><li>保证系统中只有一个实例，减少了资源的占用，避免了不必要的内存浪费。</li><li>对于某些需要频繁创建和销毁对象的场景，使用单例模式可以减少系统的开销。</li><li>单例模式可以全局访问，方便统一管理和调用。</li></ol><p>单例模式也存在一些缺点:</p><ol><li>单例模式会对代码的可测试性造成影响，因为单例实例在整个系统中只存在一个，很难进行单元测试。</li><li>单例模式的实现有时会牵扯到复杂的线程同步操作，如果实现不当，可能会导致死锁等问题。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 只有一个类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-type">static</span> Singleton *<span class="hljs-title">getInstance</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span></span>;<br>   <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>   ~<span class="hljs-built_in">Singleton</span>()<br>   &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;Singleton析构函数调用&quot;</span> &lt;&lt; endl;<br>      singleton = <span class="hljs-literal">nullptr</span>;<br>      <span class="hljs-keyword">delete</span> singleton;<br>   &#125;;<br><br><span class="hljs-keyword">protected</span>:<br>   <span class="hljs-comment">// 这里的构造函数必须为protected，否则子类不法访问父类构造函数</span><br>   <span class="hljs-built_in">Singleton</span>()<br>   &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;Singleton构造函数调用&quot;</span> &lt;&lt; endl;<br>   &#125;;<br><br><span class="hljs-keyword">private</span>:<br>   <span class="hljs-type">static</span> Singleton *singleton;<br>&#125;;<br><br><span class="hljs-comment">// SingletonA</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonA</span> : <span class="hljs-keyword">public</span> Singleton<br>&#123;<br>   <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>; <span class="hljs-comment">// 必须为友元，否则父类无法访问子类的构造函数</span><br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>&#123;<br>      std::cout &lt;&lt; <span class="hljs-string">&quot;SingletonA的show调用&quot;</span> &lt;&lt; std::endl;<br>   &#125;<br><br>   ~<span class="hljs-built_in">SingletonA</span>()<br>   &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;SingletonA析构函数调用&quot;</span> &lt;&lt; endl;<br>   &#125;;<br><br><span class="hljs-keyword">private</span>:<br>   <span class="hljs-built_in">SingletonA</span>()<br>   &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;SingletonA构造函数调用&quot;</span> &lt;&lt; endl;<br>   &#125;;<br>&#125;;<br><br><span class="hljs-comment">// SingletonB</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonB</span> : <span class="hljs-keyword">public</span> Singleton<br>&#123;<br>   <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>; <span class="hljs-comment">// 必须为友元，否则父类无法访问子类的构造函数</span><br><span class="hljs-keyword">public</span>:<br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   </span>&#123;<br>      std::cout &lt;&lt; <span class="hljs-string">&quot;SingletonB的show调用&quot;</span> &lt;&lt; std::endl;<br>   &#125;<br><br>   ~<span class="hljs-built_in">SingletonB</span>()<br>   &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;SingletonB析构函数调用&quot;</span> &lt;&lt; endl;<br>   &#125;;<br><br><span class="hljs-keyword">private</span>:<br>   <span class="hljs-built_in">SingletonB</span>()<br>   &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;SingletonB构造函数调用&quot;</span> &lt;&lt; endl;<br>   &#125;;<br>&#125;;<br><br><span class="hljs-comment">// 初始化静态成员变量singleton</span><br>Singleton *Singleton::singleton = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-comment">// 初始化实例函数</span><br><span class="hljs-function">Singleton *<span class="hljs-title">Singleton::getInstance</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">nullptr</span>)<br>   &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;singletonA&quot;</span>) == <span class="hljs-number">0</span>)<br>      &#123;<br>         singleton = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SingletonA</span>();<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;singletonB&quot;</span>) == <span class="hljs-number">0</span>)<br>      &#123;<br>         singleton = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SingletonB</span>();<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>         singleton = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Singleton</span>();<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> singleton;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   Singleton *st = Singleton::<span class="hljs-built_in">getInstance</span>(<span class="hljs-string">&quot;singletonA&quot;</span>);<br>   st-&gt;<span class="hljs-built_in">show</span>();<br>   <span class="hljs-keyword">delete</span> st;<br>   st = Singleton::<span class="hljs-built_in">getInstance</span>(<span class="hljs-string">&quot;singletonB&quot;</span>);<br>   st-&gt;<span class="hljs-built_in">show</span>();<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果不delete掉st，再赋值为singletonB没有反应</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   Singleton *st = Singleton::<span class="hljs-built_in">getInstance</span>(<span class="hljs-string">&quot;singletonA&quot;</span>);<br>   st-&gt;<span class="hljs-built_in">show</span>();<br>   <span class="hljs-comment">// st = nullptr;</span><br>   <span class="hljs-comment">// delete st;</span><br>   Singleton *st1 = Singleton::<span class="hljs-built_in">getInstance</span>(<span class="hljs-string">&quot;singletonB&quot;</span>);<br>   st1-&gt;<span class="hljs-built_in">show</span>();<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样也不行，还是只要st存在，就会返回Singleton::singleton</p><h2 id="5、原型模式"><a href="#5、原型模式" class="headerlink" title="5、原型模式"></a>5、原型模式</h2><ol><li>原型模式（Prototype Pattern）是一种<strong>创建型设计模式</strong>，它允许通过复制现有对象来创建新的对象，而无需知道对象的具体实现细节。在原型模式中，我们可以将现有对象作为原型，然后通过复制该原型来创建新的对象。</li><li>使用原型模式的一个显著优点是可以避免重复创建相似的对象，从而提高程序的性能和效率。另外，原型模式也可以用来隐藏对象创建的细节，从而使代码更加简洁和易于维护。</li><li>在实现原型模式时，通常需要在原型类中定义一个clone()方法，用于创建并返回一个新的对象实例。**clone()**方法通常会先创建一个与原型对象相同类型的新对象，然后将原型对象的状态复制到新对象中，最后返回新对象。在C++中，我们可以使用拷贝构造函数或赋值运算符来实现对象的复制。</li></ol><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230405153846.png" alt="原型模式"></p><p>代码示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Shape* <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Circle</span>() &#123;&#125;<br>    <span class="hljs-built_in">Circle</span>(<span class="hljs-type">const</span> Circle&amp; other) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Shape* <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// return new Circle(*this) 的作用是创建一个新的 Circle 对象，并返回该对象的指针，从而实现了原型模式的复制功能</span><br>        <span class="hljs-comment">// *this指的是当前的Circle对象</span><br>        <span class="hljs-comment">// new Circle(*this)会调用拷贝构造函数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Circle</span>(*<span class="hljs-keyword">this</span>); <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Drawing a circle.\n&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Square</span> : <span class="hljs-keyword">public</span> Shape &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Square</span>() &#123;&#125;<br>    <span class="hljs-built_in">Square</span>(<span class="hljs-type">const</span> Square&amp; other) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Shape* <span class="hljs-title">clone</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Square</span>(*<span class="hljs-keyword">this</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Drawing a square.\n&quot;</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p><code>return new Circle(*this);</code></p><p>&#x2F;&#x2F; return new Circle(*this) 的作用是创建一个新的 Circle 对象，并返回该对象的指针，从而实现了原型模式的复制功能</p><p>&#x2F;&#x2F; *this指的是当前的Circle对象</p><p>&#x2F;&#x2F; new Circle(*this)会调用拷贝构造函数</p></blockquote><p>测试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Circle* prototypeCircle = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Circle</span>();<br>  Square* prototypeSquare = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Square</span>();<br><br>  Shape* circle1 = prototypeCircle-&gt;<span class="hljs-built_in">clone</span>();<br>  Shape* circle2 = prototypeCircle-&gt;<span class="hljs-built_in">clone</span>();<br>  circle1-&gt;<span class="hljs-built_in">draw</span>();<br>  circle2-&gt;<span class="hljs-built_in">draw</span>();<br>  Shape* square1 = prototypeSquare-&gt;<span class="hljs-built_in">clone</span>();<br>  square1-&gt;<span class="hljs-built_in">draw</span>();<br>  <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6、建造者模式"><a href="#6、建造者模式" class="headerlink" title="6、建造者模式"></a>6、建造者模式</h2><p>建造者模式（Builder Pattern）是一种创建型设计模式，它允许你使用相同的构建过程来创建不同的表示形式。</p><p>建造者模式的主要目的是将一个复杂对象的构建过程分离出来，使其可以独立于主要的业务逻辑而变化。通过使用建造者模式，我们可以更加灵活地创建复杂的对象，而不需要关心其具体的构建过程。</p><p>建造者模式通常由以下几个角色组成：</p><ol><li>Director（指挥者）：负责调用建造者来构建产品，并控制建造的流程。</li><li>Builder（建造者）：负责定义产品的构建过程，以及如何组装各个部件。</li><li>Concrete Builder（具体建造者）：负责实现 Builder 接口，以定义产品的各个部件的具体构建方式。</li><li>Product（产品）：要创建的复杂对象，通常由多个部件组成。</li></ol><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230405160820.png" alt="建造者模式"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/5.</span><br><span class="hljs-comment"> * 建造者模式</span><br><span class="hljs-comment"> * 将一个复杂对象的构建过程分离出来，使其可以独立于主要的业务逻辑而变化</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 要创建的复杂对象，通常由多个部件组成。 </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_part_a</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; part_a)</span> </span>&#123;<br>        part_a_ = part_a;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_part_b</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; part_b)</span> </span>&#123;<br>        part_b_ = part_b;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_part_c</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; part_c)</span> </span>&#123;<br>        part_c_ = part_c;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_parts</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Part A: &quot;</span> &lt;&lt; part_a_ &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Part B: &quot;</span> &lt;&lt; part_b_ &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Part C: &quot;</span> &lt;&lt; part_c_ &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    std::string part_a_;<br>    std::string part_b_;<br>    std::string part_c_;<br>&#125;;<br><br><span class="hljs-comment">// 负责定义产品的构建过程，以及如何组装各个部件。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">build_part_a</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">build_part_b</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">build_part_c</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Product* <span class="hljs-title">get_product</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 负责实现 Builder 接口，以定义产品的各个部件的具体构建方式。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteBuilder</span> : <span class="hljs-keyword">public</span> Builder &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ConcreteBuilder</span>() : <span class="hljs-built_in">product_</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Product</span>()) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">build_part_a</span><span class="hljs-params">()</span> </span>&#123;<br>        product_-&gt;<span class="hljs-built_in">set_part_a</span>(<span class="hljs-string">&quot;Part A&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">build_part_b</span><span class="hljs-params">()</span> </span>&#123;<br>        product_-&gt;<span class="hljs-built_in">set_part_b</span>(<span class="hljs-string">&quot;Part B&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">build_part_c</span><span class="hljs-params">()</span> </span>&#123;<br>        product_-&gt;<span class="hljs-built_in">set_part_c</span>(<span class="hljs-string">&quot;Part C&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> Product* <span class="hljs-title">get_product</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> product_;<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    Product* product_;<br>&#125;;<br><br><span class="hljs-comment">// 负责调用建造者来构建产品，并控制建造的流程。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Director</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Director</span>(Builder* builder) : <span class="hljs-built_in">builder_</span>(builder) &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">construct</span><span class="hljs-params">()</span> </span>&#123;<br>        builder_-&gt;<span class="hljs-built_in">build_part_a</span>();<br>        builder_-&gt;<span class="hljs-built_in">build_part_b</span>();<br>        builder_-&gt;<span class="hljs-built_in">build_part_c</span>();<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    Builder* builder_;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ConcreteBuilder builder1;<br>    <span class="hljs-function">Director <span class="hljs-title">director</span><span class="hljs-params">(&amp;builder1)</span></span>;<br>    director.<span class="hljs-built_in">construct</span>();<br>    Product* product = builder1.<span class="hljs-built_in">get_product</span>();<br>    product-&gt;<span class="hljs-built_in">print_parts</span>();<br>    <span class="hljs-keyword">delete</span> product;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7、外观模式"><a href="#7、外观模式" class="headerlink" title="7、外观模式"></a>7、外观模式</h2><p>C++外观模式是一种设计模式，它提供了一个简单的接口，用于访问复杂系统的子系统。外观模式隐藏了系统的复杂性，并为客户端提供了一个简单的接口，以便于使用系统。</p><p>在C++中，外观模式通常涉及到一个外观类，该类封装了<strong>子系统</strong>的复杂性，并提供了一个简单的接口，用于访问子系统的功能。客户端只需要与外观类交互，并不需要了解子系统的工作原理。</p><p>下面以数值迷你过程举例，数值模拟一般包括建模、划分网格、计算和后处理4部分。</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230405200558.png" alt="外观模式"></p><p>示例代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/5.</span><br><span class="hljs-comment"> * 外观模式</span><br><span class="hljs-comment"> * 当一个系统很复杂时，系统提供给客户的是一个简单的对外接口，而把里面复杂的结构都封装了起来。</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createModel</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;建模&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mesh</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">createMesh</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;划分网格&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Caculate</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">numericalCalculation</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;数值计算&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PostProcess</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pprocess</span><span class="hljs-params">()</span></span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;后处理&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Simulation</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Simulation</span>():<span class="hljs-built_in">model_</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Model</span>()),<span class="hljs-built_in">mesh_</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Mesh</span>()),<span class="hljs-built_in">cal_</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Caculate</span>()),<span class="hljs-built_in">post_</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">PostProcess</span>())&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">simulate</span><span class="hljs-params">()</span></span>&#123;<br>    model_-&gt;<span class="hljs-built_in">createModel</span>();<br>    mesh_-&gt;<span class="hljs-built_in">createMesh</span>();<br>    cal_-&gt;<span class="hljs-built_in">numericalCalculation</span>();<br>    post_-&gt;<span class="hljs-built_in">pprocess</span>();<br>  &#125;<br><span class="hljs-keyword">private</span>:<br>  Model *model_;<br>  Mesh *mesh_;<br>  Caculate *cal_;<br>  PostProcess *post_;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Simulation s;<br>  s.<span class="hljs-built_in">simulate</span>();<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8、组合模式"><a href="#8、组合模式" class="headerlink" title="8、组合模式"></a>8、组合模式</h2><p>C++组合模式是一种设计模式，它允许我们将对象组成<u><strong>树形</strong></u>结构，以表示“整体&#x2F;部分”层次结构。组合模式使我们能够以一致的方式处理单个对象和对象的组合。</p><p>在C++中，组合模式通常涉及到一个组件类，该类定义了表示“整体&#x2F;部分”层次结构的所有对象的通用接口。组件类可以是抽象的，也可以是具体的。</p><p>组件类可以有子类，这些子类可以是叶子节点，也可以是组合节点。叶子节点表示树中的单个对象，而组合节点表示树中的对象组合。组合节点可以包含一个或多个子节点，这些子节点可以是叶子节点，也可以是组合节点。</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230405205839.png" alt="组合模式"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/5.</span><br><span class="hljs-comment"> * 组合模式</span><br><span class="hljs-comment"> * 对象组合成树形结构以表示“部分-整体”的层次结构。组合使得用户对单个对象和组合对象的使用具有一致性</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Item</span>(string name) : <span class="hljs-built_in">name_</span>(name)&#123;&#125;;<br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Item</span>()&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(Item *aItem)</span></span>&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span></span>&#123;&#125;;<br><br><span class="hljs-keyword">protected</span>:<br>  string name_;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Folder</span> : <span class="hljs-keyword">public</span> Item<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Folder</span>(string name) : <span class="hljs-built_in">Item</span>(name)&#123;&#125;;<br>  ~<span class="hljs-built_in">Folder</span>() <span class="hljs-keyword">override</span>&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(Item *aItem)</span></span><br><span class="hljs-function">  </span>&#123;<br>    item_list_.<span class="hljs-built_in">push_back</span>(aItem);<br>  &#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; depth; i++)<br>    &#123;<br>      <span class="hljs-comment">/* code */</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;-&quot;</span>;<br>    &#125;<br>    cout &lt;&lt; name_ &lt;&lt; endl;<br>    list&lt;Item *&gt;::iterator iter = item_list_.<span class="hljs-built_in">begin</span>();<br>    <span class="hljs-keyword">for</span> (; iter != item_list_.<span class="hljs-built_in">end</span>(); iter++)<br>    &#123;<br>      <span class="hljs-comment">/* code */</span><br>      (*iter)-&gt;<span class="hljs-built_in">Show</span>(depth + <span class="hljs-number">2</span>);<br>    &#125;<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  list&lt;Item *&gt; item_list_;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GraphicsA</span> : <span class="hljs-keyword">public</span> Item<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">GraphicsA</span>(string name) : <span class="hljs-built_in">Item</span>(name)&#123;&#125;;<br>  ~<span class="hljs-built_in">GraphicsA</span>() <span class="hljs-keyword">override</span>&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; depth; i++)<br>    &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;-&quot;</span>;<br>    &#125;<br>    cout &lt;&lt; name_ &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GraphicsB</span> : <span class="hljs-keyword">public</span> Item<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">GraphicsB</span>(string name) : <span class="hljs-built_in">Item</span>(name)&#123;&#125;;<br>  ~<span class="hljs-built_in">GraphicsB</span>() <span class="hljs-keyword">override</span>&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">(<span class="hljs-type">int</span> depth)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; depth; i++)<br>    &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;-&quot;</span>;<br>    &#125;<br>    cout &lt;&lt; name_ &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Item *root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Folder</span>(<span class="hljs-string">&quot;总分组&quot;</span>);<br>  Item *b1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GraphicsA</span>(<span class="hljs-string">&quot;球1&quot;</span>);<br>  Item *c1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GraphicsB</span>(<span class="hljs-string">&quot;立方体1&quot;</span>);<br>  root-&gt;<span class="hljs-built_in">Add</span>(b1);<br>  root-&gt;<span class="hljs-built_in">Add</span>(c1);<br><br>  Item *f1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Folder</span>(<span class="hljs-string">&quot;分组1&quot;</span>);<br>  Item *b2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GraphicsA</span>(<span class="hljs-string">&quot;球2&quot;</span>);<br>  Item *c2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GraphicsB</span>(<span class="hljs-string">&quot;立方体2&quot;</span>);<br>  f1-&gt;<span class="hljs-built_in">Add</span>(b2);<br>  f1-&gt;<span class="hljs-built_in">Add</span>(c2);<br>  root-&gt;<span class="hljs-built_in">Add</span>(f1);<br><br>  root-&gt;<span class="hljs-built_in">Show</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">delete</span> root;<br>  <span class="hljs-keyword">delete</span> b1;<br>  <span class="hljs-keyword">delete</span> c1;<br>  <span class="hljs-keyword">delete</span> f1;<br>  <span class="hljs-keyword">delete</span> b2;<br>  <span class="hljs-keyword">delete</span> c2;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230405204311.png" alt="组合模式"></p><blockquote><p>注意这里的show函数传入了一个深度，深度递增+2.root调用时show传入的为0，b1、c1和f1传入时show调用的是2，b2和c2调用时传入的是4.</p></blockquote><p>上面的实现方式有缺点，就是内存的释放不好，需要客户自己动手，非常不方便。有待改进，比较好的做法是让Folder类来释放。因为所有的指针都是存在Folder类的链表中。</p><h2 id="9、代理模式"><a href="#9、代理模式" class="headerlink" title="9、代理模式"></a>9、代理模式</h2><p>允许我们提供一个代理对象来<u><strong>控制对另一个对象的访问</strong></u>。代理模式使我们能够在不改变原始对象的情况下，增强其功能或控制其访问。</p><p>在C++中，代理模式通常涉及到一个代理类和一个原始类。代理类实现了与原始类相同的接口，并在其内部维护一个对原始对象的引用。代理类可以拦截对原始对象的访问，并根据需要将其转发给原始对象。</p><p>主要分为（1）远程代理，（2）虚代理，（3）保护代理，（4）智能引用。本文主要介绍虚代理和智能引用两种情况。</p><h3 id="9-1-虚代理"><a href="#9-1-虚代理" class="headerlink" title="9.1 虚代理"></a>9.1 虚代理</h3><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/8pECVbqIO0y4v6U2GWEqj1wOpq0tQgnKBOPUTlooMiaDichaA8sjurqucSvLElA54Ib0IayKdpXhia3p0Bz6ZwxpQ/640?wx_fmt=jpeg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="代理模式"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/5.</span><br><span class="hljs-comment"> * 代理模式</span><br><span class="hljs-comment"> * 允许我们提供一个代理对象来控制对另一个对象的访问。代理模式使我们能够在不改变原始对象的情况下，增强其功能或控制其访问。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 图片基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Image</span>  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Image</span>(string name): <span class="hljs-built_in">imageName_</span>(name) &#123;&#125;  <br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Image</span>() &#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span> </span>&#123;&#125;  <br><span class="hljs-keyword">protected</span>:  <br>    string imageName_;  <br>&#125;;  <br><br><span class="hljs-comment">// 大图片</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BigImage</span>: <span class="hljs-keyword">public</span> Image  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">BigImage</span>(string name):<span class="hljs-built_in">Image</span>(name) &#123;&#125;  <br>    ~<span class="hljs-built_in">BigImage</span>() &#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;Show big image : &quot;</span>&lt;&lt;imageName_&lt;&lt;endl; &#125;  <br>&#125;;  <br><br><span class="hljs-comment">// 大图片代理</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BigImageProxy</span>: <span class="hljs-keyword">public</span> Image  <br>&#123;  <br><span class="hljs-keyword">private</span>:  <br>    BigImage *bigImage_;  <span class="hljs-comment">// 大图片</span><br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">BigImageProxy</span>(string name):<span class="hljs-built_in">Image</span>(name),<span class="hljs-built_in">bigImage_</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;  <br>    ~<span class="hljs-built_in">BigImageProxy</span>() &#123; <span class="hljs-keyword">delete</span> bigImage_; &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span>   </span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">if</span>(bigImage_ == <span class="hljs-literal">nullptr</span>)  <br>            bigImage_ = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BigImage</span>(imageName_);  <br>        bigImage_-&gt;<span class="hljs-built_in">Show</span>();  <br>    &#125;  <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Image *image = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BigImageProxy</span>(<span class="hljs-string">&quot;proxy.jpg&quot;</span>); <span class="hljs-comment">//代理  </span><br>    image-&gt;<span class="hljs-built_in">Show</span>(); <span class="hljs-comment">//需要时由代理负责打开  </span><br>    <span class="hljs-keyword">delete</span> image;  <br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="9-2-引用代理"><a href="#9-2-引用代理" class="headerlink" title="9.2 引用代理"></a>9.2 引用代理</h3><p>手写一个auto_ptr</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">auto_ptr</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">auto_ptr</span><span class="hljs-params">(T *p = <span class="hljs-literal">nullptr</span>)</span> : pointee(p)&#123;</span>&#125;;<br>  <span class="hljs-built_in">auto_ptr</span>(auto_ptr&lt;T&gt; &amp;rhs) : <span class="hljs-built_in">pointee</span>(rhs.<span class="hljs-built_in">release</span>())&#123;&#125;;<br>  ~<span class="hljs-built_in">auto_ptr</span>() &#123; <span class="hljs-keyword">delete</span> pointee; &#125;;<br>  auto_ptr&lt;T&gt; &amp;<span class="hljs-keyword">operator</span>=(auto_ptr &amp;rhs)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != &amp;rhs)<br>      <span class="hljs-built_in">reset</span>(rhs.<span class="hljs-built_in">release</span>());<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>  &#125;<br>  T &amp;<span class="hljs-keyword">operator</span>*() <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> *pointee; &#125;;<br>  T &amp;<span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> pointee; &#125;;<br>  <span class="hljs-function">T *<span class="hljs-title">get</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> pointee; &#125;;<br>  <span class="hljs-function">T *<span class="hljs-title">release</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    T *oldPointee = pointee;<br>    pointee = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-keyword">return</span> oldPointee;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reset</span><span class="hljs-params">(T *p = <span class="hljs-literal">nullptr</span>)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">if</span> (pointee != p)<br>    &#123;<br>      <span class="hljs-keyword">delete</span> pointee;<br>      pointee = p;<br>    &#125;<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  T *pointee;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-function">auto_ptr&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>(<span class="hljs-number">42</span>))</span></span>;<br>  auto_ptr&lt;<span class="hljs-type">int</span>&gt; p2 = p1;<br>  cout &lt;&lt; *p2 &lt;&lt;endl;<br>  <span class="hljs-keyword">auto</span> p3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">50</span>);<br>  p2.<span class="hljs-built_in">reset</span>(p3);<br>  cout &lt;&lt; *p2 &lt;&lt;endl;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10、享元模式"><a href="#10、享元模式" class="headerlink" title="10、享元模式"></a>10、享元模式</h2><ol><li>C++中的享元模式是一种<strong>结构型设计模式</strong>，它旨在通过共享对象来最小化内存使用和对象创建的开销。</li><li>在享元模式中，对象的状态被分为<strong>内部状态</strong>和<strong>外部状态</strong>，其中内部状态是对象的固有属性，而外部状态则是在运行时由客户端传递给对象的信息。</li><li>在C++中，实现享元模式需要定义一个享元工厂类和一个享元类。</li><li>享元工厂类负责创建和管理享元对象，而享元类则负责存储和处理对象的内部状态和外部状态。</li></ol><p>比如：在设计一款游戏时，里面有很多的怪物，这些怪物虽然分为不同的类别，但每种都有自己的血条、攻击力和防御力。</p><ol><li>定义一个map，用于存储哥布林、兽人和龙；</li><li>创建哥布林对象，如果已经存在哥布林对象，返回已存在的哥布林的引用，否则新建哥布林对象；</li><li>可以验证g1和g2是同一个对象的引用。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/5.</span><br><span class="hljs-comment"> * 享元模式</span><br><span class="hljs-comment"> * C++中的享元模式是一种结构型设计模式，它旨在通过共享对象来最小化内存使用和对象创建的开销。</span><br><span class="hljs-comment"> * 在享元模式中，对象的状态被分为内部状态和外部状态，其中内部状态是对象的固有属性，而外部状态则是在运行时由客户端传递给对象的信息。</span><br><span class="hljs-comment"> * 在C++中，实现享元模式需要定义一个享元工厂类和一个享元类。</span><br><span class="hljs-comment"> * 享元工厂类负责创建和管理享元对象，而享元类则负责存储和处理对象的内部状态和外部状态。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monster</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Monster</span>(<span class="hljs-type">int</span> hp, <span class="hljs-type">int</span> atk, <span class="hljs-type">int</span> def) : <span class="hljs-built_in">hp_</span>(hp), <span class="hljs-built_in">atk_</span>(atk), <span class="hljs-built_in">def_</span>(def)&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">stack</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">int</span> hp_;<br>  <span class="hljs-type">int</span> atk_;<br>  <span class="hljs-type">int</span> def_;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MonsterFactory</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">Monster *<span class="hljs-title">getMonster</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;name)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">auto</span> it = monsterMap_.<span class="hljs-built_in">find</span>(name);<br>    <span class="hljs-keyword">if</span> (it != monsterMap_.<span class="hljs-built_in">end</span>())<br>    &#123;<br>      <span class="hljs-keyword">return</span> it-&gt;second;<br>    &#125;<br>    Monster *monster = <span class="hljs-built_in">createMonster</span>(name);<br>    monsterMap_[name] = monster;<br>    <span class="hljs-keyword">return</span> monster;<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  std::map&lt;std::string, Monster *&gt; monsterMap_;<br>  <span class="hljs-function">Monster *<span class="hljs-title">createMonster</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;name)</span></span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">if</span> (name == <span class="hljs-string">&quot;Goblin&quot;</span>)<br>    &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Monster</span>(<span class="hljs-number">50</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name == <span class="hljs-string">&quot;Orc&quot;</span>)<br>    &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Monster</span>(<span class="hljs-number">100</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Monster</span>(<span class="hljs-number">200</span>, <span class="hljs-number">30</span>, <span class="hljs-number">20</span>);<br>    &#125;<br>  &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  MonsterFactory monsterFactory;<br>  Monster *g1 = monsterFactory.<span class="hljs-built_in">getMonster</span>(<span class="hljs-string">&quot;Goblin&quot;</span>);<br>  Monster *g2 = monsterFactory.<span class="hljs-built_in">getMonster</span>(<span class="hljs-string">&quot;Goblin&quot;</span>);<br>  Monster *o1 = monsterFactory.<span class="hljs-built_in">getMonster</span>(<span class="hljs-string">&quot;Orc&quot;</span>);<br>  Monster *o2 = monsterFactory.<span class="hljs-built_in">getMonster</span>(<span class="hljs-string">&quot;Orc&quot;</span>);<br>  Monster *d1 = monsterFactory.<span class="hljs-built_in">getMonster</span>(<span class="hljs-string">&quot;Dragon&quot;</span>);<br>  Monster *d2 = monsterFactory.<span class="hljs-built_in">getMonster</span>(<span class="hljs-string">&quot;Dragon&quot;</span>);<br><br>  cout &lt;&lt; (g1 == g2) &lt;&lt; endl;<br>  cout &lt;&lt; (o1 == o2) &lt;&lt; endl;<br>  cout &lt;&lt; (d1 == d2) &lt;&lt; endl;<br>  cout &lt;&lt; g1-&gt;second &lt;&lt; endl;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="绘制棋盘案例"><a href="#绘制棋盘案例" class="headerlink" title="绘制棋盘案例"></a>绘制棋盘案例</h3><ol><li>虽然棋盘上有很多的棋子，但他们不是白色都是黑色，每种颜色的属性都一致，只是位置不同。我们将位置单独存放。</li><li>创建白色棋子时，如果已经存在一个对象，就直接向容器中添加位置；如果不存在，则需要先创建，再添加位置；</li><li>这样所有的白色只享一个对象，极大地节约内存空间。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//棋子颜色  </span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">PieceColor</span> &#123;BLACK, WHITE&#125;;  <br><span class="hljs-comment">//棋子位置  </span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">PiecePos</span>  <br>&#123;  <br>    <span class="hljs-type">int</span> x;  <br>    <span class="hljs-type">int</span> y;  <br>    <span class="hljs-built_in">PiecePos</span>(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b): <span class="hljs-built_in">x</span>(a), <span class="hljs-built_in">y</span>(b) &#123;&#125;  <br>&#125;;  <br><span class="hljs-comment">//棋子定义  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Piece</span>  <br>&#123;  <br><span class="hljs-keyword">protected</span>:  <br>    PieceColor m_color; <span class="hljs-comment">//颜色  </span><br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Piece</span>(PieceColor color): <span class="hljs-built_in">m_color</span>(color) &#123;&#125;  <br>    ~<span class="hljs-built_in">Piece</span>() &#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">()</span> </span>&#123;&#125;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BlackPiece</span>: <span class="hljs-keyword">public</span> Piece  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">BlackPiece</span>(PieceColor color): <span class="hljs-built_in">Piece</span>(color) &#123;&#125;  <br>    ~<span class="hljs-built_in">BlackPiece</span>() &#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;绘制一颗黑棋\n&quot;</span>; &#125;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WhitePiece</span>: <span class="hljs-keyword">public</span> Piece  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">WhitePiece</span>(PieceColor color): <span class="hljs-built_in">Piece</span>(color) &#123;&#125;  <br>    ~<span class="hljs-built_in">WhitePiece</span>() &#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Draw</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;绘制一颗白棋\n&quot;</span>;&#125;  <br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PieceBoard</span>  <br>&#123;  <br><span class="hljs-keyword">private</span>:  <br>    vector&lt;PiecePos&gt; m_vecPos; <span class="hljs-comment">//存放棋子的位置  </span><br>    <span class="hljs-comment">// 虽然棋盘上有很多的棋子，但他们不是白色都是黑色，每种颜色的属性都一致，只是位置不同。我们将位置单独存放。</span><br>    Piece *m_blackPiece;        <br>    Piece *m_whitePiece;       <br>    string m_blackName;  <br>    string m_whiteName;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">PieceBoard</span>(string black, string white): <span class="hljs-built_in">m_blackName</span>(black), <span class="hljs-built_in">m_whiteName</span>(white)  <br>    &#123;  <br>        m_blackPiece = null;  <br>        m_whitePiece = <span class="hljs-literal">NULL</span>;  <br>    &#125;  <br>    ~<span class="hljs-built_in">PieceBoard</span>() &#123; <span class="hljs-keyword">delete</span> m_blackPiece; <span class="hljs-keyword">delete</span> m_whitePiece;&#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetPiece</span><span class="hljs-params">(PieceColor color, PiecePos pos)</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">if</span>(color == BLACK)  <br>        &#123;  <br>            <span class="hljs-keyword">if</span>(m_blackPiece == <span class="hljs-literal">NULL</span>)  <span class="hljs-comment">//只有一颗黑棋  </span><br>                m_blackPiece = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BlackPiece</span>(color);     <br>            cout&lt;&lt;m_blackName&lt;&lt;<span class="hljs-string">&quot;在位置(&quot;</span>&lt;&lt;pos.x&lt;&lt;<span class="hljs-string">&#x27;,&#x27;</span>&lt;&lt;pos.y&lt;&lt;<span class="hljs-string">&quot;)&quot;</span>;  <br>            m_blackPiece-&gt;<span class="hljs-built_in">Draw</span>();  <br>        &#125;  <br>        <span class="hljs-keyword">else</span>  <br>        &#123;  <br>            <span class="hljs-keyword">if</span>(m_whitePiece == <span class="hljs-literal">NULL</span>)  <br>                m_whitePiece = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WhitePiece</span>(color);  <br>            cout&lt;&lt;m_whiteName&lt;&lt;<span class="hljs-string">&quot;在位置(&quot;</span>&lt;&lt;pos.x&lt;&lt;<span class="hljs-string">&#x27;,&#x27;</span>&lt;&lt;pos.y&lt;&lt;<span class="hljs-string">&quot;)&quot;</span>;  <br>            m_whitePiece-&gt;<span class="hljs-built_in">Draw</span>();  <br>        &#125;  <br>        m_vecPos.<span class="hljs-built_in">push_back</span>(pos);  <br>    &#125;  <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    <span class="hljs-function">PieceBoard <span class="hljs-title">pieceBoard</span><span class="hljs-params">(<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>)</span></span>;  <br>    pieceBoard.<span class="hljs-built_in">SetPiece</span>(BLACK, <span class="hljs-built_in">PiecePos</span>(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>));  <br>    pieceBoard.<span class="hljs-built_in">SetPiece</span>(WHITE, <span class="hljs-built_in">PiecePos</span>(<span class="hljs-number">4</span>, <span class="hljs-number">16</span>));  <br>    pieceBoard.<span class="hljs-built_in">SetPiece</span>(BLACK, <span class="hljs-built_in">PiecePos</span>(<span class="hljs-number">16</span>, <span class="hljs-number">4</span>));  <br>    pieceBoard.<span class="hljs-built_in">SetPiece</span>(WHITE, <span class="hljs-built_in">PiecePos</span>(<span class="hljs-number">16</span>, <span class="hljs-number">16</span>));  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11、桥接模式"><a href="#11、桥接模式" class="headerlink" title="11、桥接模式"></a>11、桥接模式</h2><p>C++中的桥接模式是一种结构型设计模式，<strong>它旨在将抽象部分与实现部分分离开来，从而使它们可以独立地变化</strong>。在桥接模式中，抽象部分和实现部分通过一个桥接接口进行连接，从而实现解耦和灵活性。</p><p>在C++中，实现桥接模式需要定义一个-<strong>抽象基类</strong>和一个<strong>实现基类</strong>，其中抽象基类定义了抽象部分的接口，而实现基类定义了实现部分的接口。然后，我们通过继承和组合来实现不同的抽象部分和实现部分的组合。</p><p>举一个操作系统的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//操作系统  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OS</span>  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">InstallOS_Imp</span><span class="hljs-params">()</span> </span>&#123;&#125;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowOS</span>: <span class="hljs-keyword">public</span> OS  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallOS_Imp</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;安装Window操作系统&quot;</span>&lt;&lt;endl; &#125;   <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinuxOS</span>: <span class="hljs-keyword">public</span> OS  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallOS_Imp</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;安装Linux操作系统&quot;</span>&lt;&lt;endl; &#125;   <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnixOS</span>: <span class="hljs-keyword">public</span> OS  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallOS_Imp</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;安装Unix操作系统&quot;</span>&lt;&lt;endl; &#125;   <br>&#125;;<br><br><br><span class="hljs-comment">//计算机  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span>  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">InstallOS</span><span class="hljs-params">(OS *os)</span> </span>&#123;&#125;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DellComputer</span>: <span class="hljs-keyword">public</span> Computer  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallOS</span><span class="hljs-params">(OS *os)</span> </span>&#123; os-&gt;<span class="hljs-built_in">InstallOS_Imp</span>(); &#125;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AppleComputer</span>: <span class="hljs-keyword">public</span> Computer  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallOS</span><span class="hljs-params">(OS *os)</span> </span>&#123; os-&gt;<span class="hljs-built_in">InstallOS_Imp</span>(); &#125;  <br>&#125;;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HPComputer</span>: <span class="hljs-keyword">public</span> Computer  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InstallOS</span><span class="hljs-params">(OS *os)</span> </span>&#123; os-&gt;<span class="hljs-built_in">InstallOS_Imp</span>(); &#125;  <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    OS *os1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WindowOS</span>();  <br>    OS *os2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">LinuxOS</span>();  <br>    Computer *computer1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">AppleComputer</span>();  <br>    computer1-&gt;<span class="hljs-built_in">InstallOS</span>(os1);  <br>    computer1-&gt;<span class="hljs-built_in">InstallOS</span>(os2);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Created by 23984 on 2023/4/5.</span><br><span class="hljs-comment"> * 桥接模式</span><br><span class="hljs-comment"> * 它旨在将抽象部分与实现部分分离开来，从而使它们可以独立地变化。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-comment">// 抽象部分的接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shape</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 抽象部分的实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> : <span class="hljs-keyword">public</span> Shape<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Circle</span>(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y, <span class="hljs-type">double</span> radius, DrawingAPI *drawingAPI)<br>      : <span class="hljs-built_in">m_x</span>(x), <span class="hljs-built_in">m_y</span>(y), <span class="hljs-built_in">m_radius</span>(radius), <span class="hljs-built_in">m_drawingAPI</span>(drawingAPI) &#123;&#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">  </span>&#123;<br>    m_drawingAPI-&gt;<span class="hljs-built_in">drawCircle</span>(m_x, m_y, m_radius);<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">double</span> m_x;<br>  <span class="hljs-type">double</span> m_y;<br>  <span class="hljs-type">double</span> m_radius;<br>  DrawingAPI *m_drawingAPI;<br>&#125;;<br><br><span class="hljs-comment">// 抽象部分的实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> : <span class="hljs-keyword">public</span> Shape<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Rectangle</span>(<span class="hljs-type">double</span> x1, <span class="hljs-type">double</span> y1, <span class="hljs-type">double</span> x2, <span class="hljs-type">double</span> y2, DrawingAPI *drawingAPI)<br>      : <span class="hljs-built_in">m_x1</span>(x1), <span class="hljs-built_in">m_y1</span>(y1), <span class="hljs-built_in">m_x2</span>(x2), <span class="hljs-built_in">m_y2</span>(y2), <span class="hljs-built_in">m_drawingAPI</span>(drawingAPI) &#123;&#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">  </span>&#123;<br>    m_drawingAPI-&gt;<span class="hljs-built_in">drawRectangle</span>(m_x1, m_y1, m_x2, m_y2);<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">double</span> m_x1;<br>  <span class="hljs-type">double</span> m_y1;<br>  <span class="hljs-type">double</span> m_x2;<br>  <span class="hljs-type">double</span> m_y2;<br>  DrawingAPI *m_drawingAPI;<br>&#125;;<br><br><span class="hljs-comment">// 实现部分的接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawingAPI</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y, <span class="hljs-type">double</span> radius)</span> </span>= <span class="hljs-number">0</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> x1, <span class="hljs-type">double</span> y1, <span class="hljs-type">double</span> x2, <span class="hljs-type">double</span> y2)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 具体的实现部分</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawingAPI1</span> : <span class="hljs-keyword">public</span> DrawingAPI<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y, <span class="hljs-type">double</span> radius)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">  </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;API1.circle at &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; radius &lt;&lt; endl;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> x1, <span class="hljs-type">double</span> y1, <span class="hljs-type">double</span> x2, <span class="hljs-type">double</span> y2)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">  </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;API1.rectangle at &quot;</span> &lt;&lt; x1 &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; y1 &lt;&lt; <span class="hljs-string">&quot; to &quot;</span> &lt;&lt; x2 &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; y2 &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 具体的实现部分</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawingAPI2</span> : <span class="hljs-keyword">public</span> DrawingAPI<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawCircle</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y, <span class="hljs-type">double</span> radius)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">  </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;API2.circle at &quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; radius &lt;&lt; endl;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">drawRectangle</span><span class="hljs-params">(<span class="hljs-type">double</span> x1, <span class="hljs-type">double</span> y1, <span class="hljs-type">double</span> x2, <span class="hljs-type">double</span> y2)</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function">  </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;API2.rectangle at &quot;</span> &lt;&lt; x1 &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; y1 &lt;&lt; <span class="hljs-string">&quot; to &quot;</span> &lt;&lt; x2 &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span> &lt;&lt; y2 &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  DrawingAPI1 api1;<br>  DrawingAPI2 api2;<br><br>  <span class="hljs-function">Circle <span class="hljs-title">circle1</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, &amp;api1)</span></span>;<br>  <span class="hljs-function">Rectangle <span class="hljs-title">rectangle1</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, &amp;api1)</span></span>;<br><br>  <span class="hljs-function">Circle <span class="hljs-title">circle2</span><span class="hljs-params">(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, &amp;api2)</span></span>;<br>  <span class="hljs-function">Rectangle <span class="hljs-title">rectangle2</span><span class="hljs-params">(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, &amp;api2)</span></span>;<br><br>  circle1.<span class="hljs-built_in">draw</span>();<br>  rectangle1.<span class="hljs-built_in">draw</span>();<br>  circle2.<span class="hljs-built_in">draw</span>();<br>  rectangle2.<span class="hljs-built_in">draw</span>();<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12、装饰模式"><a href="#12、装饰模式" class="headerlink" title="12、装饰模式"></a>12、装饰模式</h2><p>C++中的装饰器模式（Decorator Pattern）是一种结构型设计模式，它允许你在不改变对象自身的基础上，动态地给一个对象添加额外的职责。装饰器模式以对客户端透明的方式扩展对象的功能。</p><p>装饰器模式的核心思想是：将对象嵌套在一系列装饰器中，每个装饰器都为对象增加一些功能。装饰器和被装饰的对象都实现相同的接口，这样装饰器就可以完全替代被装饰的对象。</p><p>比如有一个手机，允许你为手机添加特性，比如增加挂件、屏幕贴膜等。一种灵活的设计方式是，将手机嵌入到另一对象中，由这个对象完成特性的添加，我们称这个嵌入的对象为装饰。这个装饰与它所装饰的组件接口一致，因此它对使用该组件的客户透明。</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202304101648512.png" alt="装饰模式"></p><p>代码演示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 手机类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">Phone</span>()&#123;&#125;;<br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Phone</span>()&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">ShowDecorate</span><span class="hljs-params">()</span></span>&#123;&#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">iPhone</span> : <span class="hljs-keyword">public</span> Phone<br>&#123;<br><span class="hljs-keyword">private</span>:<br>  string m_name;<br><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">iPhone</span>(string name) : <span class="hljs-built_in">m_name</span>(name)&#123;&#125;;<br>  ~<span class="hljs-built_in">iPhone</span>()&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowDecorate</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123; cout &lt;&lt; m_name &lt;&lt; <span class="hljs-string">&quot;的装饰：&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NokiiaPhone</span> : <span class="hljs-keyword">public</span> Phone<br>&#123;<br><span class="hljs-keyword">private</span>:<br>  string m_name;<br><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">NokiiaPhone</span>(string name) : <span class="hljs-built_in">m_name</span>(name)&#123;&#125;;<br>  ~<span class="hljs-built_in">NokiiaPhone</span>()&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowDecorate</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123; cout &lt;&lt; m_name &lt;&lt; <span class="hljs-string">&quot;的装饰：&quot;</span>; &#125;<br>&#125;;<br><br><span class="hljs-comment">// 装饰器基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoratorPhone</span> : <span class="hljs-keyword">public</span> Phone<br>&#123;<br><span class="hljs-keyword">private</span>:<br>  Phone *m_phone;<br><br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">DecoratorPhone</span>(Phone *phone) : <span class="hljs-built_in">m_phone</span>(phone)&#123;&#125;;<br>  ~<span class="hljs-built_in">DecoratorPhone</span>()&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">ShowDecorate</span><span class="hljs-params">()</span> </span>&#123; m_phone-&gt;<span class="hljs-built_in">ShowDecorate</span>(); &#125;;<br>&#125;;<br><br><span class="hljs-comment">// 挂件装饰器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoratorPhoneA</span> : <span class="hljs-keyword">public</span> DecoratorPhone<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">DecoratorPhoneA</span>(Phone *phone) : <span class="hljs-built_in">DecoratorPhone</span>(phone)&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowDecorate</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    DecoratorPhone::<span class="hljs-built_in">ShowDecorate</span>();<br>    <span class="hljs-built_in">AddDecorate</span>();<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddDecorate</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;增加挂件&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 贴膜装饰器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoratorPhoneB</span> : <span class="hljs-keyword">public</span> DecoratorPhone<br>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-built_in">DecoratorPhoneB</span>(Phone *phone) : <span class="hljs-built_in">DecoratorPhone</span>(phone)&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowDecorate</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    DecoratorPhone::<span class="hljs-built_in">ShowDecorate</span>();<br>    <span class="hljs-built_in">AddDecorate</span>();<br>  &#125;<br><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddDecorate</span><span class="hljs-params">()</span></span><br><span class="hljs-function">  </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;屏幕贴膜&quot;</span> &lt;&lt; endl;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  Phone *iphone = <span class="hljs-keyword">new</span> <span class="hljs-built_in">NokiiaPhone</span>(<span class="hljs-string">&quot;6300&quot;</span>);<br>  Phone *dpa = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DecoratorPhoneA</span>(iphone);<br>  Phone *dpb = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DecoratorPhoneB</span>(iphone);<br>  dpb-&gt;<span class="hljs-built_in">ShowDecorate</span>();<br>  <span class="hljs-keyword">delete</span> dpa;<br>  <span class="hljs-keyword">delete</span> dpb;<br>  <span class="hljs-keyword">delete</span> iphone;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><p>6300的装饰：屏幕贴膜</p><h2 id="13、备忘录模式"><a href="#13、备忘录模式" class="headerlink" title="13、备忘录模式"></a>13、备忘录模式</h2><p>备忘录模式是一种行为型设计模式，用于在不破坏封装性的前提下，捕获和恢复对象的内部状态。该模式常常被用于需要在某个时刻保存对象的状态，并在以后的某个时刻恢复该状态的情形。备忘录模式的核心是定义了一个备忘录对象，用于存储当前对象的状态，以便在需要恢复状态时使用。</p><p>在 C++ 中，实现备忘录模式通常需要定义三个角色：</p><ol><li>原始对象是需要保存状态的对象；</li><li>备忘录对象负责存储原始对象的状态；</li><li>管理者对象则负责管理备忘录对象，通常包括存储备忘录对象、撤销操作等功能。</li></ol><p>这样以后就可将该对象恢复到原先保存的状态。举个简单的例子，我们玩游戏时都会保存进度，所保存的进度以文件的形式存在。这样下次就可以继续玩，而不用从头开始。这里的进度其实就是游戏的内部状态，而这里的文件相当于是在游戏之外保存状态。这样，下次就可以从文件中读入保存的进度，从而恢复到原来的状态。这就是备忘录模式。</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230412115456.png" alt="备忘录"></p><p>代码演示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//需保存的信息  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Memento</span>    <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-type">int</span> m_vitality; <span class="hljs-comment">//生命值  </span><br>    <span class="hljs-type">int</span> m_attack;   <span class="hljs-comment">//进攻值  </span><br>    <span class="hljs-type">int</span> m_defense;  <span class="hljs-comment">//防守值  </span><br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Memento</span>(<span class="hljs-type">int</span> vitality, <span class="hljs-type">int</span> attack, <span class="hljs-type">int</span> defense):   <br>      <span class="hljs-built_in">m_vitality</span>(vitality),<span class="hljs-built_in">m_attack</span>(attack),<span class="hljs-built_in">m_defense</span>(defense)&#123;&#125;  <br>    Memento&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Memento &amp;memento)   <br>    &#123;  <br>        m_vitality = memento.m_vitality;  <br>        m_attack = memento.m_attack;  <br>        m_defense = memento.m_defense;  <br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;  <br>    &#125;  <br>&#125;;  <br><span class="hljs-comment">//游戏角色  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameRole</span>    <br>&#123;  <br><span class="hljs-keyword">private</span>:  <br>    <span class="hljs-type">int</span> m_vitality;  <br>    <span class="hljs-type">int</span> m_attack;  <br>    <span class="hljs-type">int</span> m_defense;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">GameRole</span>(): <span class="hljs-built_in">m_vitality</span>(<span class="hljs-number">100</span>),<span class="hljs-built_in">m_attack</span>(<span class="hljs-number">100</span>),<span class="hljs-built_in">m_defense</span>(<span class="hljs-number">100</span>) &#123;&#125;  <br>    <span class="hljs-function">Memento <span class="hljs-title">Save</span><span class="hljs-params">()</span>  <span class="hljs-comment">//保存进度，只与Memento对象交互，并不牵涉到Caretake  </span></span><br><span class="hljs-function">    </span>&#123;   <br>        <span class="hljs-function">Memento <span class="hljs-title">memento</span><span class="hljs-params">(m_vitality, m_attack, m_defense)</span></span>;  <br>        <span class="hljs-keyword">return</span> memento;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Load</span><span class="hljs-params">(Memento memento)</span>  <span class="hljs-comment">//载入进度，只与Memento对象交互，并不牵涉到Caretake  </span></span><br><span class="hljs-function">    </span>&#123;  <br>        m_vitality = memento.m_vitality;  <br>        m_attack = memento.m_attack;   <br>        m_defense = memento.m_defense;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Show</span><span class="hljs-params">()</span> </span>&#123; cout&lt;&lt;<span class="hljs-string">&quot;vitality : &quot;</span>&lt;&lt; m_vitality&lt;&lt;<span class="hljs-string">&quot;, attack : &quot;</span>&lt;&lt; m_attack&lt;&lt;<span class="hljs-string">&quot;, defense : &quot;</span>&lt;&lt; m_defense&lt;&lt;endl; &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Attack</span><span class="hljs-params">()</span> </span>&#123; m_vitality -= <span class="hljs-number">10</span>; m_attack -= <span class="hljs-number">10</span>;  m_defense -= <span class="hljs-number">10</span>; &#125;  <br>&#125;;  <br><span class="hljs-comment">//保存的进度库  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Caretake</span>    <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Caretake</span>() &#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Save</span><span class="hljs-params">(Memento menento)</span> </span>&#123; m_vecMemento.<span class="hljs-built_in">push_back</span>(menento); &#125;  <br>    <span class="hljs-function">Memento <span class="hljs-title">Load</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span> </span>&#123; <span class="hljs-keyword">return</span> m_vecMemento[state]; &#125;  <br><span class="hljs-keyword">private</span>:  <br>    vector&lt;Memento&gt; m_vecMemento;  <br>&#125;;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Caretake caretake;  <span class="hljs-comment">//保存的进度库 </span><br>    GameRole role;  <span class="hljs-comment">//游戏角色  </span><br>    role.<span class="hljs-built_in">Show</span>();   <span class="hljs-comment">//初始值  </span><br>    caretake.<span class="hljs-built_in">Save</span>(role.<span class="hljs-built_in">Save</span>()); <span class="hljs-comment">//保存状态  </span><br>    role.<span class="hljs-built_in">Attack</span>();     <br>    role.<span class="hljs-built_in">Show</span>();  <span class="hljs-comment">//进攻后  </span><br>    role.<span class="hljs-built_in">Load</span>(caretake.<span class="hljs-built_in">Load</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">//载入状态   </span><br>    role.<span class="hljs-built_in">Show</span>();  <span class="hljs-comment">//恢复到状态0  </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="14、中介者模式"><a href="#14、中介者模式" class="headerlink" title="14、中介者模式"></a>14、中介者模式</h2><p>中介者模式是一种行为设计模式，它允许对象之间通过中介者进行通信，而不是直接互相通信。</p><p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p>通过A给B和C发信息,也可以通过B给A和C发信息</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230412123204.png" alt="中介者模式"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Colleague</span>;<br><br><span class="hljs-comment">// 中介者类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message, Colleague* colleague)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 同事类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Colleague</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Colleague</span>(Mediator* mediator) : <span class="hljs-built_in">m_mediator</span>(mediator) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> </span>&#123;<br>        m_mediator-&gt;<span class="hljs-built_in">sendMessage</span>(message, <span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> </span>= <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">protected</span>:<br>    Mediator* m_mediator;<br>&#125;;<br><br><span class="hljs-comment">// 具体同事类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteColleagueA</span> : <span class="hljs-keyword">public</span> Colleague &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ConcreteColleagueA</span>(Mediator* mediator) : <span class="hljs-built_in">Colleague</span>(mediator) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteColleagueA received message: &quot;</span> &lt;&lt; message &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteColleagueB</span> : <span class="hljs-keyword">public</span> Colleague &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ConcreteColleagueB</span>(Mediator* mediator) : <span class="hljs-built_in">Colleague</span>(mediator) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteColleagueB received message: &quot;</span> &lt;&lt; message &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteColleagueC</span> : <span class="hljs-keyword">public</span> Colleague &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ConcreteColleagueC</span>(Mediator* mediator) : <span class="hljs-built_in">Colleague</span>(mediator) &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">receiveMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;ConcreteColleagueC received message: &quot;</span> &lt;&lt; message &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 具体中介者类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteMediator</span> : <span class="hljs-keyword">public</span> Mediator &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addColleague</span><span class="hljs-params">(Colleague* colleague)</span> </span>&#123;<br>        m_colleagues.<span class="hljs-built_in">push_back</span>(colleague);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; message, Colleague* sender)</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> colleague : m_colleagues) &#123;<br>            <span class="hljs-keyword">if</span> (colleague != sender) &#123;<br>                colleague-&gt;<span class="hljs-built_in">receiveMessage</span>(message);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    std::vector&lt;Colleague*&gt; m_colleagues;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ConcreteMediator mediator;<br><br>    <span class="hljs-function">ConcreteColleagueA <span class="hljs-title">colleagueA</span><span class="hljs-params">(&amp;mediator)</span></span>;<br>    <span class="hljs-function">ConcreteColleagueB <span class="hljs-title">colleagueB</span><span class="hljs-params">(&amp;mediator)</span></span>;<br>    <span class="hljs-function">ConcreteColleagueC <span class="hljs-title">colleagueC</span><span class="hljs-params">(&amp;mediator)</span></span>;<br><br>    mediator.<span class="hljs-built_in">addColleague</span>(&amp;colleagueA);<br>    mediator.<span class="hljs-built_in">addColleague</span>(&amp;colleagueB);<br>    mediator.<span class="hljs-built_in">addColleague</span>(&amp;colleagueC);<br><br>    colleagueA.<span class="hljs-built_in">sendMessage</span>(<span class="hljs-string">&quot;Hello, colleagueB和C!&quot;</span>);<br>    colleagueB.<span class="hljs-built_in">sendMessage</span>(<span class="hljs-string">&quot;Hi, colleagueA和C!&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230412123322.png" alt="输出"></p><p>房屋中介案例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(string msg)</span></span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">GetMessage</span><span class="hljs-params">(string msg)</span></span>&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">SetMediator</span><span class="hljs-params">(Mediator* mediator)</span></span>&#123;&#125;;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">AddPerson</span><span class="hljs-params">(Person* person)</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(string msg,Person* person)</span></span>&#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MediatorA</span> : <span class="hljs-keyword">public</span> Mediator&#123;<br><span class="hljs-keyword">private</span>:<br>    vector&lt;Person*&gt; person_vector_;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddPerson</span><span class="hljs-params">(Person* person)</span></span>&#123;<br>        person_vector_.<span class="hljs-built_in">push_back</span>(person);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(string msg,Person* person)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> aPerson : person_vector_)&#123;<br>            <span class="hljs-keyword">if</span>(aPerson != person)&#123;<br>                aPerson-&gt;<span class="hljs-built_in">GetMessage</span>(msg);<br>            &#125;<br>        &#125;<br>        <br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonA</span> : <span class="hljs-keyword">public</span> Person&#123;<br><span class="hljs-keyword">protected</span>:<br>    Mediator *mediator_;<br>    string name_;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">PersonA</span>(string name):<span class="hljs-built_in">name_</span>(name)&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SendMessage</span><span class="hljs-params">(string msg)</span></span>&#123;<br>        mediator_-&gt;<span class="hljs-built_in">SendMessage</span>(msg,<span class="hljs-keyword">this</span>);<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetMessage</span><span class="hljs-params">(string msg)</span></span>&#123;<br>        cout &lt;&lt; name_ &lt;&lt; <span class="hljs-string">&quot;获得信息&quot;</span> &lt;&lt; msg &lt;&lt; endl;<br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetMediator</span><span class="hljs-params">(Mediator* mediator)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;mediator_ = mediator;<br>    &#125;;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    MediatorA med1;<br>    Person *personA = <span class="hljs-keyword">new</span> <span class="hljs-built_in">PersonA</span>(<span class="hljs-string">&quot;person1&quot;</span>);<br>    Person *personB = <span class="hljs-keyword">new</span> <span class="hljs-built_in">PersonA</span>(<span class="hljs-string">&quot;person2&quot;</span>);<br>    Person *personC = <span class="hljs-keyword">new</span> <span class="hljs-built_in">PersonA</span>(<span class="hljs-string">&quot;person3&quot;</span>);<br><br>    personA-&gt;<span class="hljs-built_in">SetMediator</span>(&amp;med1);<br>    personB-&gt;<span class="hljs-built_in">SetMediator</span>(&amp;med1);<br><br>    med1.<span class="hljs-built_in">AddPerson</span>(personA);<br>    med1.<span class="hljs-built_in">AddPerson</span>(personB);<br>    med1.<span class="hljs-built_in">AddPerson</span>(personC);<br><br>    personA-&gt;<span class="hljs-built_in">SendMessage</span>(<span class="hljs-string">&quot;你好&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230412184109.png" alt="房产中介"></p><h2 id="15、职责链模式"><a href="#15、职责链模式" class="headerlink" title="15、职责链模式"></a>15、职责链模式</h2><ol><li>是一种行为设计模式，它允许你将请求沿着处理者链进行发送，直到有一个处理者能够处理该请求为止。</li><li>在职责链模式中，你可以为多个对象设置处理请求的机会。这些对象形成一条链，请求在链上传递，直到链上的某个对象能够处理该请求为止。通常情况下，链上的每个对象都有其自己的处理逻辑，以及对下一个处理者的引用。</li><li>在实现职责链模式时，你需要创建一个抽象处理者类，用于定义请求的处理方法和下一个处理者的引用。然后，你需要为每个具体的处理者创建一个子类，实现其自己的处理逻辑。最后，你需要将这些处理者组成一条链，并将请求沿着链进行传递。</li><li>其思想很简单，考虑员工要求加薪。公司的管理者一共有三级，总经理、总监、经理，如果一个员工要求加薪，应该向主管的经理申请，如果加薪的数量在经理的职权内，那么经理可以直接批准，否则将申请上交给总监。总监的处理方式也一样，总经理可以处理所有请求。这就是典型的职责链模式，请求的处理形成了一条链，直到有一个对象处理请求。</li></ol><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230412232935.png" alt="职责链模式"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//抽象管理者  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Manager</span>  <br>&#123;  <br><span class="hljs-keyword">protected</span>:  <br>    Manager *m_manager;  <br>    string m_name;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Manager</span>(Manager *manager, string name):<span class="hljs-built_in">m_manager</span>(manager), <span class="hljs-built_in">m_name</span>(name)&#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">DealWithRequest</span><span class="hljs-params">(string name, <span class="hljs-type">int</span> num)</span>  </span>&#123;&#125;  <br>&#125;;<br><br><span class="hljs-comment">//经理  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonManager</span>: <span class="hljs-keyword">public</span> Manager  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">CommonManager</span>(Manager *manager, string name):<span class="hljs-built_in">Manager</span>(manager,name) &#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DealWithRequest</span><span class="hljs-params">(string name, <span class="hljs-type">int</span> num)</span>   </span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">500</span>) <span class="hljs-comment">//经理职权之内  </span><br>        &#123;  <br>            cout&lt;&lt;<span class="hljs-string">&quot;经理&quot;</span>&lt;&lt;m_name&lt;&lt;<span class="hljs-string">&quot;批准&quot;</span>&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;加薪&quot;</span>&lt;&lt;num&lt;&lt;<span class="hljs-string">&quot;元&quot;</span>&lt;&lt;endl&lt;&lt;endl;  <br>        &#125;  <br>        <span class="hljs-keyword">else</span>  <br>        &#123;  <br>            cout&lt;&lt;<span class="hljs-string">&quot;经理&quot;</span>&lt;&lt;m_name&lt;&lt;<span class="hljs-string">&quot;无法处理，交由总监处理&quot;</span>&lt;&lt;endl;  <br>            m_manager-&gt;<span class="hljs-built_in">DealWithRequest</span>(name, num);  <br>        &#125;  <br>    &#125;  <br>&#125;;<br><br><span class="hljs-comment">//总监  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Majordomo</span>: <span class="hljs-keyword">public</span> Manager  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Majordomo</span>(Manager *manager, string name):<span class="hljs-built_in">Manager</span>(manager,name) &#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DealWithRequest</span><span class="hljs-params">(string name, <span class="hljs-type">int</span> num)</span>   </span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">1000</span>) <span class="hljs-comment">//总监职权之内  </span><br>        &#123;  <br>            cout&lt;&lt;<span class="hljs-string">&quot;总监&quot;</span>&lt;&lt;m_name&lt;&lt;<span class="hljs-string">&quot;批准&quot;</span>&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;加薪&quot;</span>&lt;&lt;num&lt;&lt;<span class="hljs-string">&quot;元&quot;</span>&lt;&lt;endl&lt;&lt;endl;  <br>        &#125;  <br>        <span class="hljs-keyword">else</span>  <br>        &#123;  <br>            cout&lt;&lt;<span class="hljs-string">&quot;总监&quot;</span>&lt;&lt;m_name&lt;&lt;<span class="hljs-string">&quot;无法处理，交由总经理处理&quot;</span>&lt;&lt;endl;  <br>            m_manager-&gt;<span class="hljs-built_in">DealWithRequest</span>(name, num);  <br>        &#125;  <br>    &#125;  <br>&#125;; <br><br><span class="hljs-comment">//总经理  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GeneralManager</span>: <span class="hljs-keyword">public</span> Manager  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">GeneralManager</span>(Manager *manager, string name):<span class="hljs-built_in">Manager</span>(manager,name) &#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DealWithRequest</span><span class="hljs-params">(string name, <span class="hljs-type">int</span> num)</span>  <span class="hljs-comment">//总经理可以处理所有请求  </span></span><br><span class="hljs-function">    </span>&#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;总经理&quot;</span>&lt;&lt;m_name&lt;&lt;<span class="hljs-string">&quot;批准&quot;</span>&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;加薪&quot;</span>&lt;&lt;num&lt;&lt;<span class="hljs-string">&quot;元&quot;</span>&lt;&lt;endl&lt;&lt;endl;  <br>    &#125;  <br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Manager *general = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GeneralManager</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;A&quot;</span>); <span class="hljs-comment">//设置上级，总经理没有上级  </span><br>    Manager *majordomo = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Majordomo</span>(general, <span class="hljs-string">&quot;B&quot;</span>); <span class="hljs-comment">//设置上级  </span><br>    Manager *common = <span class="hljs-keyword">new</span> <span class="hljs-built_in">CommonManager</span>(majordomo, <span class="hljs-string">&quot;C&quot;</span>); <span class="hljs-comment">//设置上级  </span><br>    common-&gt;<span class="hljs-built_in">DealWithRequest</span>(<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-number">300</span>);   <span class="hljs-comment">//员工D要求加薪  </span><br>    common-&gt;<span class="hljs-built_in">DealWithRequest</span>(<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">600</span>);  <br>    common-&gt;<span class="hljs-built_in">DealWithRequest</span>(<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-number">1000</span>);  <br>    <span class="hljs-keyword">delete</span> common; <span class="hljs-keyword">delete</span> majordomo; <span class="hljs-keyword">delete</span> general;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230412233008.png" alt="输出"></p><h2 id="16、观察者模式"><a href="#16、观察者模式" class="headerlink" title="16、观察者模式"></a>16、观察者模式</h2><p>观察者模式（Observer Pattern）是一种行为型设计模式，它允许多个对象同时监听另一个对象，并在该对象发生状态改变时自动通知这些监听者，从而实现对象间的松耦合。</p><p>在C++中，观察者模式通常包含以下几个部分：</p><ul><li>抽象主题（Subject）：被观察者，它维护了一系列的观察者，并提供了添加、删除和通知观察者的接口。</li><li>具体主题（ConcreteSubject）：具体的被观察者实现，它实现了抽象主题中的接口，并且维护了一个状态。</li><li>抽象观察者（Observer）：观察者的抽象类，它定义了接收通知的接口。</li><li>具体观察者（ConcreteObserver）：具体的观察者实现，它实现了抽象观察者中的接口，同时存储了一个指向具体主题的指针。</li></ul><p>举个博客订阅的例子，当博主发表新文章的时候，即博主状态发生了改变，那些订阅的读者就会收到通知，然后进行相应的动作，比如去看文章，或者收藏起来。博主与读者之间存在种一对多的依赖关系。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//观察者  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span>    <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Observer</span>() &#123;&#125;  <br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Observer</span>() &#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Update</span><span class="hljs-params">()</span> </span>&#123;&#125;   <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Attach</span><span class="hljs-params">()</span></span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Remove</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">//博客  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Blog</span>    <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">Blog</span>() &#123;&#125;  <br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Blog</span>() &#123;&#125; <br>    <span class="hljs-comment">//添加观察者  </span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Attach</span><span class="hljs-params">(Observer *observer)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        m_observers.<span class="hljs-built_in">push_back</span>(observer);cout &lt;&lt; <span class="hljs-string">&quot;订阅成功&quot;</span> &lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-comment">//移除观察者 </span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Remove</span><span class="hljs-params">(Observer *observer)</span> </span><br><span class="hljs-function">    </span>&#123; <br>        m_observers.<span class="hljs-built_in">remove</span>(observer); <br>        cout &lt;&lt; <span class="hljs-string">&quot;取消订阅&quot;</span> &lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-comment">//通知观察者      </span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Notify</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function">    </span>&#123;  <br>        list&lt;Observer*&gt;::iterator iter = m_observers.<span class="hljs-built_in">begin</span>();  <br>        <span class="hljs-keyword">for</span>(; iter != m_observers.<span class="hljs-built_in">end</span>(); iter++)  <br>            (*iter)-&gt;<span class="hljs-built_in">Update</span>();  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">SetStatus</span><span class="hljs-params">(string s)</span> </span>&#123; m_status = s; &#125; <span class="hljs-comment">//设置状态  </span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> string <span class="hljs-title">GetStatus</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_status; &#125;    <span class="hljs-comment">//获得状态  </span><br><span class="hljs-keyword">private</span>:  <br>    list&lt;Observer* &gt; m_observers; <span class="hljs-comment">//观察者链表  </span><br><span class="hljs-keyword">protected</span>:  <br>    string m_status; <span class="hljs-comment">//状态  </span><br>&#125;;<br><br><span class="hljs-comment">//具体博客类  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogCSDN</span> : <span class="hljs-keyword">public</span> Blog  <br>&#123;  <br><span class="hljs-keyword">private</span>:  <br>    string m_name; <span class="hljs-comment">//博主名称  </span><br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">BlogCSDN</span>(string name): <span class="hljs-built_in">m_name</span>(name) &#123;&#125;  <br>    ~<span class="hljs-built_in">BlogCSDN</span>() &#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetStatus</span><span class="hljs-params">(string s)</span> </span>&#123; m_status = <span class="hljs-string">&quot;CSDN通知 : &quot;</span> + m_name + s; &#125; <span class="hljs-comment">//具体设置状态信息  </span><br>    <span class="hljs-function">string <span class="hljs-title">GetStatus</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_status; &#125;  <br>&#125;;  <br><span class="hljs-comment">//具体观察者  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObserverBlog</span> : <span class="hljs-keyword">public</span> Observer     <br>&#123;  <br><span class="hljs-keyword">private</span>:  <br>    string m_name;  <span class="hljs-comment">//观察者名称  </span><br>    Blog *m_blog;   <span class="hljs-comment">//观察的博客，当然以链表形式更好，就可以观察多个博客  </span><br><span class="hljs-keyword">public</span>:   <br>    <span class="hljs-built_in">ObserverBlog</span>(string name,Blog *blog): <span class="hljs-built_in">m_name</span>(name), <span class="hljs-built_in">m_blog</span>(blog) &#123;&#125;  <br>    ~<span class="hljs-built_in">ObserverBlog</span>() &#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Update</span><span class="hljs-params">()</span>  <span class="hljs-comment">//获得更新状态  </span></span><br><span class="hljs-function">    </span>&#123;   <br>        string status = m_blog-&gt;<span class="hljs-built_in">GetStatus</span>();  <br>        cout&lt;&lt;m_name&lt;&lt;<span class="hljs-string">&quot;-------&quot;</span>&lt;&lt;status&lt;&lt;endl;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Attach</span><span class="hljs-params">()</span></span>&#123;<br>        m_blog-&gt;<span class="hljs-built_in">Attach</span>(<span class="hljs-keyword">this</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Remove</span><span class="hljs-params">()</span></span>&#123;<br>        m_blog-&gt;<span class="hljs-built_in">Remove</span>(<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//测试案例  </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    Blog *blog = <span class="hljs-keyword">new</span> <span class="hljs-built_in">BlogCSDN</span>(<span class="hljs-string">&quot;博客1&quot;</span>);  <br>    Observer *observer1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ObserverBlog</span>(<span class="hljs-string">&quot;观察者1&quot;</span>, blog);<br>    <span class="hljs-comment">// 由粉丝调用</span><br>    observer1-&gt;<span class="hljs-built_in">Attach</span>();<br>    <span class="hljs-comment">// 由公众号经营者调用</span><br>    blog-&gt;<span class="hljs-built_in">SetStatus</span>(<span class="hljs-string">&quot;发表设计模式C++实现（15）——观察者模式&quot;</span>); <br>    <span class="hljs-comment">// 由公众号经营者调用</span><br>    blog-&gt;<span class="hljs-built_in">Notify</span>();<br>    <span class="hljs-comment">// 由粉丝调用</span><br>    observer1-&gt;<span class="hljs-built_in">Remove</span>();<br><br>    <span class="hljs-comment">// 取消订阅后，观察者不会接受</span><br>    blog-&gt;<span class="hljs-built_in">SetStatus</span>(<span class="hljs-string">&quot;发表设计模式C++实现（16）——观察者模式&quot;</span>); <br>blog-&gt;<span class="hljs-built_in">Notify</span>();<br><br>    <span class="hljs-keyword">delete</span> blog;<br>    <span class="hljs-keyword">delete</span> observer1;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="17、状态模式"><a href="#17、状态模式" class="headerlink" title="17、状态模式"></a>17、状态模式</h2><p>C++中状态模式是一种行为设计模式，它允许一个对象在内部状态改变时改变它的行为，看起来似乎改变了它的类。在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的对象。状态模式主要解决的是在对象状态转换的时候带来的复杂性问题。通常当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，这时候可以考虑使用状态模式。</p><p>它有两种使用情况：</p><ol><li>一个对象的行为取决于它的状态, 并且它必须在运行时刻根据状态改变它的行为。</li><li>一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。</li></ol><p>实现：Context类包含一个当前状态对象指针m_state，当Context的Request()方法被调用时，会调用当前状态对象的Handle()方法来处理请求。同时，Context类还提供了一个SetState()方法，用于切换状态对象。具体的状态对象实现了State类的接口，并实现了它们自己的行为。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 抽象状态(State)基类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Handle</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">// 具体状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStateA</span> : <span class="hljs-keyword">public</span> State &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Handle</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Handle state A.&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteStateB</span> : <span class="hljs-keyword">public</span> State &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Handle</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Handle state B.&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 创建一个Context类，它包含一个当前状态对象和一些可以在状态对象之间转换的方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetState</span><span class="hljs-params">(State* state)</span> </span>&#123;<br>        m_state = state;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Request</span><span class="hljs-params">()</span> </span>&#123;<br>        m_state-&gt;<span class="hljs-built_in">Handle</span>();<br>    &#125;<br><span class="hljs-keyword">private</span>:<br>    State* m_state;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ConcreteStateA stateA;<br>    ConcreteStateB stateB;<br><br>    Context context;<br>    context.<span class="hljs-built_in">SetState</span>(&amp;stateA);<br>    context.<span class="hljs-built_in">Request</span>();<br><br>    context.<span class="hljs-built_in">SetState</span>(&amp;stateB);<br>    context.<span class="hljs-built_in">Request</span>();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过使用状态模式，我们可以避免在对象状态转换时引入大量的条件分支和复杂的if-else语句，使代码更加简洁和易于维护。当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式了。</p><p>战争案例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">War</span>;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span>   <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Prophase</span><span class="hljs-params">()</span> </span>&#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Metaphase</span><span class="hljs-params">()</span> </span>&#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">Anaphase</span><span class="hljs-params">()</span> </span>&#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">End</span><span class="hljs-params">()</span> </span>&#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">CurrentState</span><span class="hljs-params">(War *war)</span> </span>&#123;&#125;  <br>&#125;;  <br><span class="hljs-comment">//战争  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">War</span>  <br>&#123;  <br><span class="hljs-keyword">private</span>:  <br>    State *m_state;  <span class="hljs-comment">//目前状态  </span><br>    <span class="hljs-type">int</span> m_days;      <span class="hljs-comment">//战争持续时间  </span><br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-built_in">War</span>(State *state): <span class="hljs-built_in">m_state</span>(state), <span class="hljs-built_in">m_days</span>(<span class="hljs-number">0</span>) &#123;&#125;  <br>    ~<span class="hljs-built_in">War</span>() &#123; <span class="hljs-keyword">delete</span> m_state; &#125;  <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetDays</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> m_days; &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetDays</span><span class="hljs-params">(<span class="hljs-type">int</span> days)</span> </span>&#123; m_days = days; &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetState</span><span class="hljs-params">(State *state)</span> </span>&#123; <span class="hljs-keyword">delete</span> m_state; m_state = state; &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetState</span><span class="hljs-params">()</span> </span>&#123; m_state-&gt;<span class="hljs-built_in">CurrentState</span>(<span class="hljs-keyword">this</span>); &#125;  <br>&#125;;<br><br><span class="hljs-comment">//战争结束  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EndState</span>: <span class="hljs-keyword">public</span> State  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">End</span><span class="hljs-params">(War *war)</span> <span class="hljs-comment">//结束阶段的具体行为  </span></span><br><span class="hljs-function">    </span>&#123;  <br>        cout&lt;&lt;<span class="hljs-string">&quot;战争结束&quot;</span>&lt;&lt;endl;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CurrentState</span><span class="hljs-params">(War *war)</span> </span>&#123; <span class="hljs-built_in">End</span>(war); &#125;  <br>&#125;;  <br><span class="hljs-comment">//后期  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AnaphaseState</span>: <span class="hljs-keyword">public</span> State  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Anaphase</span><span class="hljs-params">(War *war)</span> <span class="hljs-comment">//后期的具体行为  </span></span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">if</span>(war-&gt;<span class="hljs-built_in">GetDays</span>() &lt; <span class="hljs-number">30</span>)  <br>            cout&lt;&lt;<span class="hljs-string">&quot;第&quot;</span>&lt;&lt;war-&gt;<span class="hljs-built_in">GetDays</span>()&lt;&lt;<span class="hljs-string">&quot;天：战争后期，双方拼死一搏&quot;</span>&lt;&lt;endl;  <br>        <span class="hljs-keyword">else</span>  <br>        &#123;  <br>            war-&gt;<span class="hljs-built_in">SetState</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">EndState</span>());  <br>            war-&gt;<span class="hljs-built_in">GetState</span>();  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CurrentState</span><span class="hljs-params">(War *war)</span> </span>&#123; <span class="hljs-built_in">Anaphase</span>(war); &#125;  <br>&#125;;  <br><span class="hljs-comment">//中期  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MetaphaseState</span>: <span class="hljs-keyword">public</span> State  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Metaphase</span><span class="hljs-params">(War *war)</span> <span class="hljs-comment">//中期的具体行为  </span></span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">if</span>(war-&gt;<span class="hljs-built_in">GetDays</span>() &lt; <span class="hljs-number">20</span>)  <br>            cout&lt;&lt;<span class="hljs-string">&quot;第&quot;</span>&lt;&lt;war-&gt;<span class="hljs-built_in">GetDays</span>()&lt;&lt;<span class="hljs-string">&quot;天：战争中期，进入相持阶段，双发各有损耗&quot;</span>&lt;&lt;endl;  <br>        <span class="hljs-keyword">else</span>  <br>        &#123;  <br>            war-&gt;<span class="hljs-built_in">SetState</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">AnaphaseState</span>());  <br>            war-&gt;<span class="hljs-built_in">GetState</span>();  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CurrentState</span><span class="hljs-params">(War *war)</span> </span>&#123; <span class="hljs-built_in">Metaphase</span>(war); &#125;  <br>&#125;;  <br><span class="hljs-comment">//前期  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProphaseState</span>: <span class="hljs-keyword">public</span> State  <br>&#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Prophase</span><span class="hljs-params">(War *war)</span>  <span class="hljs-comment">//前期的具体行为  </span></span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-keyword">if</span>(war-&gt;<span class="hljs-built_in">GetDays</span>() &lt; <span class="hljs-number">10</span>)  <br>            cout&lt;&lt;<span class="hljs-string">&quot;第&quot;</span>&lt;&lt;war-&gt;<span class="hljs-built_in">GetDays</span>()&lt;&lt;<span class="hljs-string">&quot;天：战争初期，双方你来我往，互相试探对方&quot;</span>&lt;&lt;endl;  <br>        <span class="hljs-keyword">else</span>  <br>        &#123;  <br>            war-&gt;<span class="hljs-built_in">SetState</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">MetaphaseState</span>());  <br>            war-&gt;<span class="hljs-built_in">GetState</span>();  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CurrentState</span><span class="hljs-params">(War *war)</span> </span>&#123; <span class="hljs-built_in">Prophase</span>(war); &#125;  <br>&#125;;<br><br><span class="hljs-comment">//测试案例  </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br>    War *war = <span class="hljs-keyword">new</span> <span class="hljs-built_in">War</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">ProphaseState</span>());  <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">40</span>;i += <span class="hljs-number">5</span>)  <br>    &#123;  <br>        war-&gt;<span class="hljs-built_in">SetDays</span>(i);  <br>        war-&gt;<span class="hljs-built_in">GetState</span>();  <br>    &#125;  <br>    <span class="hljs-keyword">delete</span> war;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>参考链接：</p><ol><li><a href="https://design-patterns.readthedocs.io/zh-cn/latest/index.html">图说设计模式</a></li><li><a href="https://zhuanlan.zhihu.com/p/128145128">知乎：快速记忆23种设计模式</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++基础</title>
    <link href="/2024/03/17/001%20C++%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/03/17/001%20C++%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1、关键字"><a href="#1、关键字" class="headerlink" title="1、关键字"></a>1、关键字</h1><div class="note note-success">            <p><a href="https://www.runoob.com/w3cnote/cpp-keyword-intro.html">菜鸟教程</a></p>          </div><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/202203282321032.jpg#crop=0&crop=0&crop=1&crop=1&id=SHdFq&originHeight=363&originWidth=689&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h1 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h1><p>内置数据类型：算数类型和空类型</p><p>算数类型：整形和浮点型</p><h2 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h2><ol><li>定义超出范围会溢出；<table><thead><tr><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>short（短整型）</td><td>2字节</td><td>(-215~215-1)</td></tr><tr><td>int（整型）</td><td>4字节</td><td>(-231~231-1)</td></tr><tr><td>long（长整型）</td><td>win为4，linux为4（32位），8（64位）</td><td>(-231~231-1）</td></tr><tr><td>long long（长长整型）</td><td>8字节</td><td>(-263~263-1)</td></tr></tbody></table></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">// 1.短整型</span><br><span class="hljs-type">short</span> a = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 2.整型</span><br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 3.长整型</span><br><span class="hljs-type">long</span> c = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 4.长长整型</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> d = <span class="hljs-number">10</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num1=&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num2=&quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num3=&quot;</span> &lt;&lt; c &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;num4=&quot;</span> &lt;&lt; d &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-实型"><a href="#2-2-实型" class="headerlink" title="2.2 实型"></a>2.2 实型</h2><ol><li>用于表示小数；</li><li>单精度float和双精度double；</li><li>小数默认为双精度，定义float时需要加f，如<code>float a =3.14f;</code>，否则会截断；</li><li>科学计数法，<code>float f2 = 3e2;//3*10^2</code> <code>float f2 = 3e-2;//3*0.1^2</code></li></ol><p><strong>区别</strong></p><table><thead><tr><th>数据类型</th><th>占用空间</th><th>有效数字类型</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15-16位有效数字</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-type">float</span> a = <span class="hljs-number">3.14f</span>;<br><span class="hljs-type">double</span> b = <span class="hljs-number">3.14</span>;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-字符型"><a href="#2-3-字符型" class="headerlink" title="2.3 字符型"></a>2.3 字符型</h2><ol><li>表示形式<code>char ch = &#39;a&#39;;</code></li><li>单引号里面只能写一个字符；</li><li>只占用一个字节；</li><li>字符型进行存储时以ASCII存储；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 创建字符型变量</span><br><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;字符为&quot;</span> &lt;&lt; ch &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;字符所占内存为&quot;</span> &lt;&lt; <span class="hljs-keyword">sizeof</span>(ch) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;字符ch对应的ASCII编码为&quot;</span> &lt;&lt; (<span class="hljs-type">int</span>)ch &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-转义字符"><a href="#2-4-转义字符" class="headerlink" title="2.4 转义字符"></a>2.4 转义字符</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\a:蜂鸣，响铃</span> <br><span class="hljs-string">\b:回退：向后退一格</span> <br><span class="hljs-string">\f:换页</span> <br><span class="hljs-string">\n:换行，光标到下行行首</span> <br><span class="hljs-string">\r:回车，光标到本行行首</span> <br><span class="hljs-string">\t:水平制表</span> <br><span class="hljs-string">\v:垂直制表</span> <br><span class="hljs-string">\\:反斜杠</span> <br><span class="hljs-string">\&#x27;:单引号</span> <br><span class="hljs-string">\&quot;:双引号</span> <br><span class="hljs-string">\?:问号</span> <br><span class="hljs-string">\ddd:三位八进制</span> <br><span class="hljs-string">\xhh:二位十六进制</span> <br><span class="hljs-string">\0:空字符(NULL),什么都不做</span><br></code></pre></td></tr></table></figure><h2 id="2-5-字符串型"><a href="#2-5-字符串型" class="headerlink" title="2.5 字符串型"></a>2.5 字符串型</h2><ol><li>C语言类型：<code>char 变量名[] = &quot;字符串值&quot;;</code></li><li>C++类型：<code>string 变量名 = &quot;字符串值&quot;;</code></li><li><code>iostream</code>已经隐式地包含了string库，但最好还是显式一下，以免发生错误。头文件<code>#include&lt;string&gt;</code></li><li></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 1、C语言风格</span><br><span class="hljs-type">char</span> string1[] = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-comment">// 2、C++风格</span><br><span class="hljs-built_in">string</span> string2 = <span class="hljs-string">&quot;world&quot;</span>;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;string1=&quot;</span>&lt;&lt;string1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;string2=&quot;</span>&lt;&lt;string2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-6-布尔类型"><a href="#2-6-布尔类型" class="headerlink" title="2.6 布尔类型"></a>2.6 布尔类型</h2><ol><li>true和false；</li><li>只占用1字节；</li><li>实质上true为1，false为0；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// bool</span><br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;flag=&quot;</span> &lt;&lt; flag &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//输出为flag=1</span><br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-7-输入"><a href="#2-7-输入" class="headerlink" title="2.7 输入"></a>2.7 输入</h2><ol><li><code>cin 变量名</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 1、整型</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; a;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a之后=&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-comment">// 2、字符串</span><br><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;helllo&quot;</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str1=&quot;</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; str;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;str2=&quot;</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-8-decltype类型指示符"><a href="#2-8-decltype类型指示符" class="headerlink" title="2.8 decltype类型指示符"></a>2.8 decltype类型指示符</h2><ol><li>从表达式的类型推算出要定义变量的类型，而不使用该对象的初始化变量； </li><li><code>decltype(f()) sum = 0;</code>sum的类型就是f()函数返回值类型；</li></ol><p><strong>关于引用类型</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> ci = <span class="hljs-number">0</span>, &amp; cj = ci;<br>decltype(ci) x = ci; <span class="hljs-comment">//x类型是const int</span><br>decltype(cj) y = x; <span class="hljs-comment">//y类型是const int&amp;</span><br><span class="hljs-comment">// decltype(cj) z; //错误，z的类型为引用，必须初始化；</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>指针解引用</strong></p><ol><li>解引用之后得到引用类型</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">42</span>, * p = &amp;i, &amp; r = i;<br>decltype(r + <span class="hljs-number">0</span>) b;<br><span class="hljs-comment">//decltype(*p) c; //错误，*p解引用之后类型为引用，即int&amp;</span><br></code></pre></td></tr></table></figure><p><strong>多层括号</strong></p><ol><li>双层括号永远是引用</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">42</span>;<br><span class="hljs-comment">//decltype((i)) d; // 错误，加括号之后（i）为表达式，得到引用类型</span><br>decltype(i) d;<br></code></pre></td></tr></table></figure><h1 id="3、运算符"><a href="#3、运算符" class="headerlink" title="3、运算符"></a>3、运算符</h1><h2 id="3-1-算数运算符"><a href="#3-1-算数运算符" class="headerlink" title="3.1 算数运算符"></a>3.1 算数运算符</h2><ol><li>两个小数不能做取模运算；<table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>把两个操作数相加</td><td>A + B 将得到 30</td></tr><tr><td>-</td><td>从第一个操作数中减去第二个操作数</td><td>A - B 将得到 -10</td></tr><tr><td>*</td><td>把两个操作数相乘</td><td>A * B 将得到 200</td></tr><tr><td>&#x2F;</td><td>分子除以分母</td><td>B &#x2F; A 将得到 2</td></tr><tr><td>%</td><td>取模运算符，整除后的余数</td><td>B % A 将得到 0</td></tr><tr><td>++</td><td><a href="https://www.runoob.com/cplusplus/cpp-increment-decrement-operators.html">自增运算符</a></td><td></td></tr><tr><td>，整数值增加 1</td><td>A++ 将得到 11</td><td></td></tr><tr><td>–</td><td><a href="https://www.runoob.com/cplusplus/cpp-increment-decrement-operators.html">自减运算符</a></td><td></td></tr><tr><td>，整数值减少 1</td><td>A– 将得到 9</td><td></td></tr></tbody></table></li></ol><p><strong>前置自增和后置自增</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>   <span class="hljs-type">int</span> a = <span class="hljs-number">21</span>;<br>   <span class="hljs-type">int</span> c ;<br> <br>   <span class="hljs-comment">// a 的值在赋值之前不会自增</span><br>   c = a++;   <br>   <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Line 1 - Value of a++ is :&quot;</span> &lt;&lt; c &lt;&lt; <span class="hljs-built_in">endl</span> ;<br> <br>   <span class="hljs-comment">// 表达式计算之后，a 的值增加 1</span><br>   <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Line 2 - Value of a is :&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span> ;<br> <br>   <span class="hljs-comment">// a 的值在赋值之前自增</span><br>   c = ++a;  <br>   <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Line 3 - Value of ++a is  :&quot;</span> &lt;&lt; c &lt;&lt; <span class="hljs-built_in">endl</span> ;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Line</span> <span class="hljs-number">1</span> - Value of a++ is :<span class="hljs-number">21</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">2</span> - Value of a is :<span class="hljs-number">22</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">3</span> - Value of ++a is  :<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h2 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h2><table><thead><tr><th>算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>简单的赋值运算符，把右边操作数的值赋给左边操作数</td><td>C &#x3D; A + B 将把 A + B 的值赋给 C</td></tr><tr><td>+&#x3D;</td><td>加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td>C +&#x3D; A 相当于 C &#x3D; C + A</td></tr><tr><td>-&#x3D;</td><td>减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td>C -&#x3D; A 相当于 C &#x3D; C - A</td></tr><tr><td>*&#x3D;</td><td>乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td>C _&#x3D; A 相当于 C &#x3D; C _ A</td></tr><tr><td>&#x2F;&#x3D;</td><td>除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td>C &#x2F;&#x3D; A 相当于 C &#x3D; C &#x2F; A</td></tr><tr><td>%&#x3D;</td><td>求模且赋值运算符，求两个操作数的模赋值给左边操作数</td><td>C %&#x3D; A 相当于 C &#x3D; C % A</td></tr><tr><td>&lt;&lt;&#x3D;</td><td>左移且赋值运算符</td><td>C &lt;&lt;&#x3D; 2 等同于 C &#x3D; C &lt;&lt; 2</td></tr><tr><td>&gt;&gt;&#x3D;</td><td>右移且赋值运算符</td><td>C &gt;&gt;&#x3D; 2 等同于 C &#x3D; C &gt;&gt; 2</td></tr><tr><td>&amp;&#x3D;</td><td>按位与且赋值运算符</td><td>C &amp;&#x3D; 2 等同于 C &#x3D; C &amp; 2</td></tr><tr><td>^&#x3D;</td><td>按位异或且赋值运算符</td><td>C ^&#x3D; 2 等同于 C &#x3D; C ^ 2</td></tr><tr><td>&#124;&#x3D;</td><td>按位或且赋值运算符</td><td>C &#124;&#x3D; 2 等同于 C &#x3D; C &#124; 2</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">8</span>;<br>a &gt;&gt;= <span class="hljs-number">2</span>;<span class="hljs-comment">// 等于8/2^2</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h2><ol><li>输出时加括号；<code>(a==b);</code></li><li>计算时可加可不加；<table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>检查两个操作数的值是否相等，如果相等则条件为真。</td><td>(A &#x3D;&#x3D; B) 不为真。</td></tr><tr><td>!&#x3D;</td><td>检查两个操作数的值是否相等，如果不相等则条件为真。</td><td>(A !&#x3D; B) 为真。</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td>(A &gt; B) 不为真。</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td>(A &lt; B) 为真。</td></tr><tr><td>&gt;&#x3D;</td><td>检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td>(A &gt;&#x3D; B) 不为真。</td></tr><tr><td>&lt;&#x3D;</td><td>检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td>(A &lt;&#x3D; B) 为真。</td></tr></tbody></table></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">8</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; (a==b) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-type">bool</span> c = a != b;<br><span class="hljs-built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="hljs-built_in">endl</span>;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">line</span> <span class="hljs-number">1</span>:<span class="hljs-number">0</span><br><span class="hljs-attribute">line</span> <span class="hljs-number">2</span>:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h2><p>假设变量 A 的值为 1，变量 B 的值为 0，则：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。如果两个操作数都 true，则条件为 true。</td><td>(A &amp;&amp; B) 为 false。</td></tr><tr><td>&#124;&#124;</td><td>称为逻辑或运算符。如果两个操作数中有任意一个 true，则条件为 true。</td><td>(A &#124;&#124; B) 为 true。</td></tr><tr><td>!</td><td>称为逻辑非运算符。用来逆转操作数的逻辑状态，如果条件为 true 则逻辑非运算符将使其为 false。</td><td>!(A &amp;&amp; B) 为 true。</td></tr></tbody></table><h2 id="3-5-按位赋值操作"><a href="#3-5-按位赋值操作" class="headerlink" title="3.5 按位赋值操作"></a>3.5 按位赋值操作</h2><ol><li>按位与（&amp;&#x3D;）运算符，它是二进制的“与”操作，即两数中对应位都为1时为1，其他情况都为0。例如，3 &amp; 5 的结果为1。而按位与赋值操作就是将左操作数和右操作数进行按位与操作，然后将结果赋给左操作数，即a &amp;&#x3D; b等价于a &#x3D; a &amp; b。</li><li>其次是按位或（|&#x3D;）运算符，它是二进制的“或”操作，即两数中对应位有一个为1时为1，其他情况都为0。例如，3 | 5 的结果为7。而按位或赋值操作就是将左操作数和右操作数进行按位或操作，然后将结果赋给左操作数，即a |&#x3D; b等价于a &#x3D; a | b。</li><li>接下来是按位异或（^&#x3D;）运算符，它是二进制的“异或”操作，即两数中对应位相同时为0，不同时为1。例如，3 ^ 5 的结果为6。而按位异或赋值操作就是将左操作数和右操作数进行按位异或操作，然后将结果赋给左操作数，即a ^&#x3D; b等价于a &#x3D; a ^ b。</li><li>第四个是左移位（&lt;&lt;&#x3D;）运算符，它可以将一个数左移n位，相当于将其乘以2的n次方。例如，3 &lt;&lt; 5 的结果为96。而左移位赋值操作就是将左操作数左移右操作数位数个位置，然后将结果赋给左操作数，即a &lt;&lt;&#x3D; b等价于a &#x3D; a &lt;&lt; b。</li><li>第五个是右移位（&gt;&gt;&#x3D;）运算符，它可以将一个数右移n位，相当于将其除以2的n次方。例如，16 &gt;&gt; 2 的结果为4。而右移位赋值操作就是将左操作数右移右操作数位数个位置，然后将结果赋给左操作数，即a &gt;&gt;&#x3D; b等价于a &#x3D; a &gt;&gt; b。</li><li>第六个是取反（<del>）运算符，它可以将一个数的二进制码按位取反，例如，</del>3的结果为-4。而按位与取反（&amp;~）赋值运算符是a &amp;&#x3D; ~b的简写，即先按位取反b，然后与a进行按位与操作，最后将结果赋给a</li></ol><h1 id="4、程序流程结构"><a href="#4、程序流程结构" class="headerlink" title="4、程序流程结构"></a>4、程序流程结构</h1><ol><li>顺序结构、选择结构、循环结构</li></ol><h2 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h2><ol><li>if</li><li>if…else</li><li>if…else if..else if…</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入分数&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; score;<br><span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">600</span>) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;及格了&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>顺序计数器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> currVal = <span class="hljs-number">0</span>, val = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; currVal) &#123;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; val) &#123;<br><span class="hljs-keyword">if</span> (val == currVal)<br>++cnt;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; currVal &lt;&lt; <span class="hljs-string">&quot; occurs &quot;</span> &lt;&lt; cnt &lt;&lt; <span class="hljs-string">&quot; times&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>currVal = val;<br>cnt = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; currVal &lt;&lt; <span class="hljs-string">&quot; occurs &quot;</span> &lt;&lt; cnt &lt;&lt; <span class="hljs-string">&quot; times&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-三目运算符"><a href="#4-2-三目运算符" class="headerlink" title="4.2 三目运算符"></a>4.2 三目运算符</h2><ol><li>做简单的判断；</li><li><code>a &gt; b ? a : b ;</code>a比b大则为a，否则为b；</li></ol><h2 id="4-3-switch"><a href="#4-3-switch" class="headerlink" title="4.3 switch"></a>4.3 switch</h2><ol><li>switch选择结构；</li><li>switch只能判断整型或者字符型，不能是区间；</li><li>switch效率较高；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> score = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入分数&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; score;<br><span class="hljs-keyword">switch</span> (score) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;经典&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;还行&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;不行&quot;</span>&lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-while"><a href="#4-4-while" class="headerlink" title="4.4 while"></a>4.4 while</h2><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/GmU91p2bXekIsBN.jpg#crop=0&crop=0&crop=1&crop=1&id=ssv2m&originHeight=463&originWidth=414&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ol><li><code>while(循环条件)&#123;循环结构&#125;</code></li></ol><p><strong>while语句</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>, val = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (val &lt;=<span class="hljs-number">10</span>)<br>&#123;<br>sum += val;<br>++val;<br>&#125;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Sum of 1 to 10 inclusive is &quot;</span><br>&lt;&lt; sum &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：um of 1 to 10 inclusive is 55</p><p><strong>猜数字</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> numRam = rand() % <span class="hljs-number">100</span> + <span class="hljs-number">1</span>;<span class="hljs-comment">// 生成1-100的随机数</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;请输入数字&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; num;<br><span class="hljs-keyword">while</span> (num != numRam) &#123;<br><span class="hljs-keyword">if</span> (num &gt; numRam) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;大了&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; num;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;小了&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cin</span> &gt;&gt; num;<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;猜对了&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-5-do…while"><a href="#4-5-do…while" class="headerlink" title="4.5 do…while"></a>4.5 do…while</h2><ol><li><code>do&#123; 循环语句 &#125; while &#123; 循环条件 &#125;;</code></li><li>会先执行一次；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> num = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br>a = num / <span class="hljs-number">100</span>;<br>b = num / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br>c = num % <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (a*a*a + b*b*b + c*c*c == num) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;是水仙花数&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>num++;<br>&#125; <span class="hljs-keyword">while</span> (num &gt;= <span class="hljs-number">100</span> &amp;&amp; num &lt; <span class="hljs-number">1000</span>);<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-6-for循环"><a href="#4-6-for循环" class="headerlink" title="4.6 for循环"></a>4.6 for循环</h2><ol><li><code>for( 起始表达式； 条件表达式；循环语句 )&#123; 循环语句 &#125;</code></li><li>可以用来读取一组数据；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num = <span class="hljs-number">1</span>; num &lt; <span class="hljs-number">100</span>; num++) &#123;<br>a = num / <span class="hljs-number">10</span>;<br>b = num % <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">7</span> || b == <span class="hljs-number">7</span> || num % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;敲桌子&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>读取输入不定的输入数据</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>, value = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span> &gt;&gt; value)<br>&#123;<br>sum += value;<br>&#125;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Sum is: &quot;</span> &lt;&lt; sum &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入：1 2 3 4 5 6 8 da<br>输出：Sum is: 29</p><blockquote><p>或者ctrl+z，再按Enter，表示输入结束</p></blockquote><p>输入：1 2 3 4^z<br>输出：Sum is: 10</p><p><strong>乘法口诀</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; j &lt;&lt;<span class="hljs-string">&quot;*&quot;</span>&lt;&lt;i &lt;&lt;<span class="hljs-string">&quot;=&quot;</span> &lt;&lt;i*j&lt;&lt;<span class="hljs-string">&quot;\t&quot;</span>;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-7-break和continue"><a href="#4-7-break和continue" class="headerlink" title="4.7 break和continue"></a>4.7 break和continue</h2><ol><li>break跳出循环体；</li><li>continue，执行到本行不往下执行，但是循环会继续，只是跳出本次执行块；</li></ol><h2 id="4-8-goto"><a href="#4-8-goto" class="headerlink" title="4.8 goto"></a>4.8 goto</h2><ol><li>需要一个表示符，标识符命名规范同变量；</li><li>标识符一般大写；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">goto</span> FLAG;<br><br>FLAG:<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;跳转执行到这&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></td></tr></table></figure><h1 id="5、数组"><a href="#5、数组" class="headerlink" title="5、数组"></a>5、数组</h1><ol><li>存放相同类型的数据；</li><li>索引从0开始；</li></ol><h2 id="5-1-一维数组"><a href="#5-1-一维数组" class="headerlink" title="5.1 一维数组"></a>5.1 一维数组</h2><ol><li>定义</li></ol><ul><li><code>数据类型 数组名[ 数组长度 ];</code></li><li><code>数据类型 数组名[ 数组长度 ] = &#123; 值1 ，值2 ，值3...&#125;;</code></li><li><code>数组类型 数组名[] = &#123;值1 ，值2，值3...&#125;;</code></li></ul><ol start="2"><li>获取数组中的数据<code>arr[i]</code>；</li><li>数组占居内存大小<code>sizeof(arr)</code>；</li><li>元素个数<code>sizeof(arr)/sizeof(arr[0])</code>；</li><li>直接打印arr，输出为首地址；元素地址为<code>&amp;arr[0]</code>；</li></ol><h1 id="6、引用"><a href="#6、引用" class="headerlink" title="6、引用"></a>6、引用</h1><h2 id="6-1-基本介绍"><a href="#6-1-基本介绍" class="headerlink" title="6.1 基本介绍"></a>6.1 基本介绍</h2><ol><li>引用是变量的别名；</li><li>本质就是一个指针常量；</li><li>应用必须初始化，初始化后不能改变；</li><li>可以使用引用进行地址传递；</li></ol><p><strong>基本使用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>&amp; b = a;<br>b = <span class="hljs-number">20</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-2-3种交换函数"><a href="#6-2-3种交换函数" class="headerlink" title="6.2 3种交换函数"></a>6.2 3种交换函数</h2><ol><li>地址传递；</li><li>引用的好处就是不需要解引用，在作为函数实参后，需要用到值时，直接使用引用名，而指针需要加*。</li><li>每次使用引用实际上是解引用的操作。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 值传递</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-comment">// 地址传递</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">(<span class="hljs-type">int</span> *a ,<span class="hljs-type">int</span>*b)</span> &#123;<br><span class="hljs-type">int</span> temp = *a;<br>*a = *b;<br>*b = temp;<br>&#125;<br><br><span class="hljs-comment">// 引用传递</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">f3</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> &amp;b)</span> &#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-comment">//f1(a, b);</span><br><span class="hljs-comment">//f2(&amp;a, &amp;b);</span><br>f3(a, b);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a&lt;&lt;<span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-3-引用函数函数返回值"><a href="#6-3-引用函数函数返回值" class="headerlink" title="6.3 引用函数函数返回值"></a>6.3 引用函数函数返回值</h2><ol><li>不要返回局部变量的引用（较老的版本中）；</li><li>函数的调用可以作为左值；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>&amp; <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> a = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">return</span> a; <span class="hljs-comment">//返回引用地址</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>&amp; res = test02();<br><span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;<br>test02() = <span class="hljs-number">1000</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出为</p><p>20</p><p>1000</p><h2 id="6-4-常量引用"><a href="#6-4-常量引用" class="headerlink" title="6.4 常量引用"></a>6.4 常量引用</h2><ol><li>使用场景：用来修饰形参，防止误操作；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;a)</span> &#123;<br><span class="hljs-comment">// 不能再修改</span><br><span class="hljs-comment">// a = 20;</span><br><span class="hljs-built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 编译器会修改为 int temp= 10；const int &amp;a = temp;只不过这个临时变量我们不知道 </span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; a = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 修改a会报错,a已为只读</span><br><span class="hljs-comment">// a = 20;</span><br><span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br>f1(b);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7、结构体"><a href="#7、结构体" class="headerlink" title="7、结构体"></a>7、结构体</h1><h2 id="7-1-结构体概念"><a href="#7-1-结构体概念" class="headerlink" title="7.1 结构体概念"></a>7.1 结构体概念</h2><ol><li>用户自定义数据类型；</li></ol><h2 id="7-2-结构体使用"><a href="#7-2-结构体使用" class="headerlink" title="7.2 结构体使用"></a>7.2 结构体使用</h2><ol><li><code>struct 结构体名称 &#123; 结构体成员列表 &#125;</code></li><li>实例化的三种方法</li></ol><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 &#x3D; {成员1值，成员2值…}</li><li>定义结构体时顺便创建</li></ul><p><strong>创建结构体</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">int</span> score;<br>&#125;s3;<br></code></pre></td></tr></table></figure><p><strong>实例化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//1. struct 结构体名 变量名</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">s1</span>;</span><br>s1.name = <span class="hljs-string">&quot;张三&quot;</span>;<br>s1.age = <span class="hljs-number">18</span>;<br>s1.score = <span class="hljs-number">78.5</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; s1.name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s1.age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s1.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><span class="hljs-comment">//2. struct 结构体名 变量名 = &#123;&#125;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">s2</span> =</span> &#123; <span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">80.0</span> &#125;;<br><span class="hljs-built_in">cout</span> &lt;&lt; s2.name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s2.age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s2.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><span class="hljs-comment">//3. 创建结构体时创建变量s3</span><br>s3.name = <span class="hljs-string">&quot;王五&quot;</span>;<br>s3.age = <span class="hljs-number">23</span>;<br>s3.score = <span class="hljs-number">90.0</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; s3.name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s3.age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s3.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></td></tr></table></figure><h2 id="7-3-结构体数组"><a href="#7-3-结构体数组" class="headerlink" title="7.3 结构体数组"></a>7.3 结构体数组</h2><ol><li><code>struct Student stuArray[2] = &#123;&#123;"张三",18,60&#125;,&#123;"李四",20,80&#125;&#125;;</code></li><li>索引从第0个开始</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">//1. 定义结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">double</span> score;<br>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-comment">//2. 创建结构体数组</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stuArray</span>[3] =</span> &#123;<br>&#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">20</span>&#125;,<br>&#123;<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">20</span>&#125;,<br>&#123;<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">20</span>&#125;,<br>&#125;;<br><br><span class="hljs-comment">//3. 赋值</span><br>stuArray[<span class="hljs-number">2</span>].name = <span class="hljs-string">&quot;赵六&quot;</span>;<br>stuArray[<span class="hljs-number">2</span>].age = <span class="hljs-number">20</span>;<br>stuArray[<span class="hljs-number">2</span>].score = <span class="hljs-number">30</span>;<br><br><span class="hljs-comment">//4. 遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; stuArray[i].name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; stuArray[i].age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; stuArray[i].score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/dXKQRcAVmEWfrhx.png#crop=0&crop=0&crop=1&crop=1&id=mjoK4&originHeight=767&originWidth=1470&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="7-4-结构体指针"><a href="#7-4-结构体指针" class="headerlink" title="7.4 结构体指针"></a>7.4 结构体指针</h2><ol><li>指向结构体<code>struct Student* p = &amp;s;</code>,其中<code>struct</code>可以省略；</li><li>访问结构体指针访问<code>p-&gt;name</code>;</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">//1.定义结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">double</span> score;<br>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//2.创建结构体变量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">80</span>&#125;;<br><br><span class="hljs-comment">//3.通过指针指向结构体变量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span>* <span class="hljs-title">p</span> =</span> &amp;s;<br><br><span class="hljs-comment">//4.通过指针访问结构体变量</span><br><span class="hljs-built_in">cout</span> &lt;&lt; p-&gt;name &lt;&lt;<span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; p-&gt;age&lt;&lt;<span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-5-结构体嵌套结构体"><a href="#7-5-结构体嵌套结构体" class="headerlink" title="7.5 结构体嵌套结构体"></a>7.5 结构体嵌套结构体</h2><ol><li>结构体1作为结构体2的成员变量；</li><li>结构体1应该定义在结构体2前面；</li><li>结构体里结构体赋值<code>t.stu.score = 80;</code>或者<code>t.stu = &#123; &quot;张三&quot;,20,100 &#125;;</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 定义学生的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">double</span> score;<br>&#125;;<br><br><span class="hljs-comment">// 定义老师的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span> &#123;</span><br><span class="hljs-type">int</span> id;<br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-comment">//将另一个结构体作为本结构体的成员</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">stu</span>;</span><br>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>Teacher t;<br>t.id = <span class="hljs-number">01</span>;<br>t.name = <span class="hljs-string">&quot;老师1&quot;</span>;<br>t.age = <span class="hljs-number">45</span>;<br>t.stu.name = <span class="hljs-string">&quot;学生1&quot;</span>;<br>t.stu.age = <span class="hljs-number">18</span>;<br>t.stu.score = <span class="hljs-number">80</span>;<br><span class="hljs-comment">//或者</span><br>t.stu = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">100</span> &#125;;<br><br><span class="hljs-built_in">cout</span> &lt;&lt; t.stu.name &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-6-结构体做函数参数"><a href="#7-6-结构体做函数参数" class="headerlink" title="7.6 结构体做函数参数"></a>7.6 结构体做函数参数</h2><ol><li>将结构体作为参数传递到函数里； </li><li>值传递,不会修改原对象值； </li><li>地址传递，会改变原对象值；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 定义学生的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">double</span> score;<br>&#125;;<br><br><span class="hljs-comment">// 值传递,不会修改原对象值</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printStudent</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Student s)</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1.打印信息：&quot;</span> &lt;&lt; s.name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s.age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; s.score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;;<br><span class="hljs-comment">// 地址传递，会改变原对象值</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printStudent</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Student *p)</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2.打印信息：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">90</span>&#125;;<br>printStudent(s);<br>printStudent(&amp;s);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-7-结构体const"><a href="#7-7-结构体const" class="headerlink" title="7.7 结构体const"></a>7.7 结构体const</h2><p>在某些时候我们需要将结构体变量传入到一个函数内，如果使用值传递就会占用大量的内存空间，因为每调用一次函数，计算机就会赋值出一个新的结构体变量，大小和原变量相同，所以应采用地址传递来节省空间，因为指针只占用4个字节。但是使用地址传递会带来一个隐患，即可以在函数体内修改原结构体变量的值，这对数据来说是不安全的，我们需要用const进行修饰，使结构体变量不可更改。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 定义学生的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">double</span> score;<br>&#125;;<br><br><span class="hljs-comment">// 加上const修饰，就可以避免在地址传递时，函数体内修改原变量的属性</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printStu</span><span class="hljs-params">(<span class="hljs-type">const</span> Student* p)</span> &#123;<br><br><span class="hljs-comment">//p-&gt;age = 20;//错误，不能修改</span><br><span class="hljs-built_in">cout</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//创建结构体变量</span><br>Student s = &#123; <span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-number">90</span> &#125;;<br>printStu(&amp;s);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-8-结构体案例1"><a href="#7-8-结构体案例1" class="headerlink" title="7.8 结构体案例1"></a>7.8 结构体案例1</h2><ol><li>注意字符串字面量和字符相加，使用+&#x3D;比较好；</li><li>随机数种子；</li><li>判断数据类型<code>typeid(i).name();</code></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-comment">// 定义学生的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Student</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> score;<br>&#125;;<br><br><br><span class="hljs-comment">// 老师的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br>Student stuArray[<span class="hljs-number">5</span>];<br>&#125;;<br><br><br><span class="hljs-comment">// 给老师和学生赋值函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">allocateSpace</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Teacher teaArray[], <span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-built_in">string</span> nameSpace = <span class="hljs-string">&quot;ABCDE&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-built_in">string</span> tname = <span class="hljs-string">&quot;Teacher_&quot;</span> ;<br>tname += nameSpace[i];<br>teaArray[i].name =  tname;<br><span class="hljs-comment">// 学生赋值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j= <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br><span class="hljs-built_in">string</span> sname = <span class="hljs-string">&quot;Student_&quot;</span> ;<br>sname += +nameSpace[j];<br><span class="hljs-type">int</span> sscore = rand() % <span class="hljs-number">61</span> + <span class="hljs-number">40</span>;<span class="hljs-comment">//40~100</span><br>teaArray[i].stuArray[j].name = sname;<br>teaArray[i].stuArray[j].score = sscore;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printFor</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Teacher teaArray[], <span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; teaArray[i].name &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; teaArray[i].stuArray[j].name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; teaArray[i].stuArray[j].score &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-comment">// 随机数种子</span><br>srand((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)time(<span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">// 创建3名老师</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Teacher</span> <span class="hljs-title">teaArray</span>[3];</span><br><br><span class="hljs-comment">// 给老师的学生赋值</span><br><span class="hljs-type">int</span> len = <span class="hljs-keyword">sizeof</span>(teaArray) / <span class="hljs-keyword">sizeof</span>(teaArray[<span class="hljs-number">0</span>]);<br>allocateSpace(teaArray, len); <span class="hljs-comment">//数组本身就是地址传递</span><br>printFor(teaArray, len);<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-9-结构体案例2"><a href="#7-9-结构体案例2" class="headerlink" title="7.9 结构体案例2"></a>7.9 结构体案例2</h2><ol><li>冒泡排序；</li><li>临时变量temp，类型为hero；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 设计结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hero</span> &#123;</span><br><span class="hljs-built_in">string</span> name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-built_in">string</span> sex;<br>&#125;;<br><br><span class="hljs-comment">// 冒泡排序函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">rink</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> hero heroArray[],<span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len<span class="hljs-number">-1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len - i - <span class="hljs-number">1</span>; j++) &#123;<br><span class="hljs-keyword">if</span> (heroArray[j].age &gt; heroArray[j+<span class="hljs-number">1</span>].age) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hero</span> <span class="hljs-title">temp</span> =</span> heroArray[j];<br>heroArray[j] = heroArray[j+<span class="hljs-number">1</span>];<br>heroArray[j+<span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 打印输出</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printHero</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> hero heroArray[], <span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; heroArray[i].name &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; heroArray[i].age &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; heroArray[i].sex &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-comment">// 创建英雄</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hero</span> <span class="hljs-title">heroArray</span>[5] =</span> &#123;<br>&#123;<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;貂蝉&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>&#125;;<br><br><span class="hljs-comment">// 数组排序</span><br><span class="hljs-type">int</span> len = <span class="hljs-keyword">sizeof</span>(heroArray) / <span class="hljs-keyword">sizeof</span>(heroArray[<span class="hljs-number">0</span>]);<br>rink(heroArray, len);<br><br><span class="hljs-comment">// 打印输出</span><br>printHero(heroArray, len);<br><br>system(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-10-简单链表"><a href="#7-10-简单链表" class="headerlink" title="7.10 简单链表"></a>7.10 简单链表</h2><p>链表：需要的时候就分配一块空间，内存是动态变化的。而数组长度是固定不变的。</p><p><strong style="color:#00b050;">实现</strong></p><ol><li>定义一个超女结构体，含有编号、姓名、下一个超女的指针；</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SuperGril</span><br>&#123;<span class="hljs-comment">// 定义编号、姓名和下一个超女的指针</span><br><span class="hljs-type">int</span> no;<br>string name;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SuperGril</span>* next;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>初始化头号超女header、尾部超女tail 、临时超女temp;<code>SuperGril* header = nullptr, * tail = nullptr, * temp = nullptr;</code></p></li><li><p>使用临时节点创建超女，并给header和tail赋值</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 分配第一个节点，并赋值</span><br>temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SuperGril</span>(&#123; <span class="hljs-number">1</span>,<span class="hljs-string">&quot;西施&quot;</span>,<span class="hljs-literal">nullptr</span> &#125;);<br>header = tail = temp;<br><br>temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SuperGril</span>(&#123; <span class="hljs-number">2</span>,<span class="hljs-string">&quot;冰冰&quot;</span>,<span class="hljs-literal">nullptr</span> &#125;);<br>tail-&gt;next = temp; <span class="hljs-comment">// 上一个节点的next指向新节点</span><br>tail = temp; <span class="hljs-comment">// 尾部为新节点</span><br><br>temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SuperGril</span>(&#123; <span class="hljs-number">3</span>,<span class="hljs-string">&quot;丽英&quot;</span>,<span class="hljs-literal">nullptr</span> &#125;);<br>tail-&gt;next = temp; <span class="hljs-comment">// 上一个节点的next指向新节点</span><br>tail = temp; <span class="hljs-comment">// 尾部为新节点</span><br></code></pre></td></tr></table></figure><ol start="4"><li>遍历链表</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 遍历链表</span><br>temp = header;<br><span class="hljs-keyword">while</span> (temp!=<span class="hljs-literal">nullptr</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;编号&quot;</span> &lt;&lt; temp-&gt;no &lt;&lt; <span class="hljs-string">&quot;\t姓名&quot;</span> &lt;&lt;temp-&gt;name &lt;&lt; <span class="hljs-string">&quot;\t下一个节点&quot;</span> &lt;&lt; temp-&gt;next &lt;&lt; endl;<br>temp = temp-&gt;next; <span class="hljs-comment">// 向后查找</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>释放链表内存</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 释放链表内存</span><br><span class="hljs-keyword">while</span> (header!=<span class="hljs-literal">nullptr</span>)<br>&#123;<br>temp = header;<br>header = header-&gt;next;<br><span class="hljs-keyword">delete</span> temp;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong style="color:#00b050;">全部代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> std::cout;<br><span class="hljs-keyword">using</span> std::string; <span class="hljs-keyword">using</span> std::endl;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SuperGril</span><br>&#123;<span class="hljs-comment">// 定义编号、姓名和下一个超女的指针</span><br><span class="hljs-type">int</span> no;<br>string name;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SuperGril</span>* next;<br>&#125;;<br><br>SuperGril* header = <span class="hljs-literal">nullptr</span>, * tail = <span class="hljs-literal">nullptr</span>, * temp = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-comment">// 分配第一个节点，并赋值</span><br>temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SuperGril</span>(&#123; <span class="hljs-number">1</span>,<span class="hljs-string">&quot;西施&quot;</span>,<span class="hljs-literal">nullptr</span> &#125;);<br>header = tail = temp;<br><br>temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SuperGril</span>(&#123; <span class="hljs-number">2</span>,<span class="hljs-string">&quot;冰冰&quot;</span>,<span class="hljs-literal">nullptr</span> &#125;);<br>tail-&gt;next = temp; <span class="hljs-comment">// 上一个节点的next指向新节点</span><br>tail = temp; <span class="hljs-comment">// 尾部为新节点</span><br><br>temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SuperGril</span>(&#123; <span class="hljs-number">3</span>,<span class="hljs-string">&quot;丽英&quot;</span>,<span class="hljs-literal">nullptr</span> &#125;);<br>tail-&gt;next = temp; <span class="hljs-comment">// 上一个节点的next指向新节点</span><br>tail = temp; <span class="hljs-comment">// 尾部为新节点</span><br><br><span class="hljs-comment">// 传统赋值</span><br><span class="hljs-comment">//temp-&gt;no = 1;</span><br><span class="hljs-comment">//temp-&gt;name = &quot;西施&quot;;</span><br><span class="hljs-comment">//temp-&gt;next = nullptr;</span><br><br><span class="hljs-comment">// c++11推荐</span><br><span class="hljs-comment">//*(temp) = &#123; 1,&quot;西施&quot;,nullptr &#125;;</span><br><br><span class="hljs-comment">// 遍历链表</span><br>temp = header;<br><span class="hljs-keyword">while</span> (temp!=<span class="hljs-literal">nullptr</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;编号&quot;</span> &lt;&lt; temp-&gt;no &lt;&lt; <span class="hljs-string">&quot;\t姓名&quot;</span> &lt;&lt;temp-&gt;name &lt;&lt; <span class="hljs-string">&quot;\t下一个节点&quot;</span> &lt;&lt; temp-&gt;next &lt;&lt; endl;<br>temp = temp-&gt;next; <span class="hljs-comment">// 向后查找</span><br>&#125;<br><br><span class="hljs-comment">// 释放链表内存</span><br><span class="hljs-keyword">while</span> (header!=<span class="hljs-literal">nullptr</span>)<br>&#123;<br>temp = header;<br>header = header-&gt;next;<br><span class="hljs-keyword">delete</span> temp;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;释放完毕\n&quot;</span>);<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="8、共同体"><a href="#8、共同体" class="headerlink" title="8、共同体"></a>8、共同体</h1><ol><li>共同体占用的内存大小是成员占用内存最大的大小；（内存对齐）</li><li>全部成员使用一块内存；</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> std::string; <span class="hljs-keyword">using</span> std::cout; <span class="hljs-keyword">using</span> std::endl;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">union</span> <span class="hljs-title class_">MyUnion</span><br>&#123;<br><span class="hljs-type">int</span> a; <br><span class="hljs-type">double</span> b;<br><span class="hljs-type">char</span> c[<span class="hljs-number">21</span>];<br>&#125;;<br>MyUnion data;<br><br><span class="hljs-comment">// 占用大小</span><br>cout &lt;&lt; <span class="hljs-string">&quot;内存占用大小=&quot;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(data) &lt;&lt; endl; <span class="hljs-comment">//24</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;内存地址data.a=&quot;</span> &lt;&lt; (<span class="hljs-type">void</span>*) &amp;data.a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;内存地址data.b=&quot;</span> &lt;&lt; (<span class="hljs-type">void</span>*) &amp;data.b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;内存地址data.c=&quot;</span> &lt;&lt; (<span class="hljs-type">void</span>*) &amp;data.c &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="http://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20221023115211935.png" alt="image-20221023115211935"></p><h1 id="9、枚举"><a href="#9、枚举" class="headerlink" title="9、枚举"></a>9、枚举</h1><p><strong><u>创建常量的一种方式</u></strong></p><p><strong style="color:#00b050;">创建常量的方法：</strong></p><ol><li>宏常量，用预处理指令#define创建</li><li>用const关键字创建；</li><li>枚举</li></ol><p><strong style="color:#00b050;">注意事项：</strong></p><ol><li>枚举创建的变量取值只能在枚举范围之内；</li><li>枚举的作用域与变量的作用域相同；</li><li>可以设置枚举量的值</li><li>整型强制转为枚举量：<code>Colors cc = Colors(1);</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> std::string; <span class="hljs-keyword">using</span> std::cout; <span class="hljs-keyword">using</span> std::endl;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Colors</span><br>&#123;<br>red=<span class="hljs-number">0</span>,yellow,blue,other<br>&#125;;<br><br><span class="hljs-comment">// 创建一个枚举变量，只能为Colors中的一个</span><br>Colors color = red;<br><br><span class="hljs-keyword">switch</span> (color) <span class="hljs-comment">// color是整数，可以用来switch</span><br>&#123;<br><span class="hljs-keyword">case</span> red: <span class="hljs-comment">// red是整型常量，可用来case</span><br>cout &lt;&lt; <span class="hljs-string">&quot;红色&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> yellow:<br>cout &lt;&lt; <span class="hljs-string">&quot;黄色&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> blue:<br>cout &lt;&lt; <span class="hljs-string">&quot;蓝色&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> other:<br>cout &lt;&lt; <span class="hljs-string">&quot;红色&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>cout &lt;&lt; <span class="hljs-string">&quot;未知&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="10、指针"><a href="#10、指针" class="headerlink" title="10、指针"></a>10、指针</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> dval;<br><span class="hljs-type">double</span>* pd = &amp;dval;<br><span class="hljs-type">double</span>* pd2 = pd;<br>*pd2 = <span class="hljs-number">2.0</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;dval是&quot;</span>&lt;&lt;dval &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;dval的地址是&quot;</span>&lt;&lt;&amp;dval &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;*pd是&quot;</span>&lt;&lt;*pd &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pd的地址是&quot;</span>&lt;&lt;&amp;pd &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pd本身是&quot;</span>&lt;&lt;pd &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;pd2是&quot;</span>&lt;&lt;*pd2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></td></tr></table></figure><p>dval是2<br>dval的地址是0000004D63EFF808<br>pd是2<br>pd的地址是0000004D63EFF828<br>pd本身是0000004D63EFF808<br>pd2是2</p><h1 id="11、函数"><a href="#11、函数" class="headerlink" title="11、函数"></a>11、函数</h1><h2 id="11-1-函数默认值"><a href="#11-1-函数默认值" class="headerlink" title="11.1 函数默认值"></a>11.1 函数默认值</h2><ol><li>如果一个形参位置已经有默认值，则后面的形参都得有默认值；</li><li>如果函数声明中形参已经有默认值，在函数定义时就不能给默认值，否则会报错；<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>, <span class="hljs-type">int</span> c = <span class="hljs-number">30</span>)</span><br>&#123;<br><span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>f1(<span class="hljs-number">10</span>); <span class="hljs-comment">//可以只传递一个，因为在函数中b、c已经给过值</span><br>f1(<span class="hljs-number">10</span>,<span class="hljs-number">60</span>); <span class="hljs-comment">//如果给b传了值，则用传入的</span><br>&#125;<br></code></pre></td></tr></table></figure><strong>声明和定义</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">f2</span><span class="hljs-params">(<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">f2</span><span class="hljs-params">(<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>,<span class="hljs-type">int</span> b = <span class="hljs-number">10</span>)</span><br>&#123;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>f2();<br>&#125;<br></code></pre></td></tr></table></figure>报错：f2重定义默认参数</li></ol><h2 id="11-2-函数占位参数"><a href="#11-2-函数占位参数" class="headerlink" title="11.2 函数占位参数"></a>11.2 函数占位参数</h2><ol><li>c++函数形参列表可以有站位参数，但调用函数时必须补齐该位置；</li><li>语法：<code>数据类型int 函数名f(数据类型int)</code>；</li><li>占位参数也可以有默认参数；<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;你好&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>f(<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure>默认参数<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> = <span class="hljs-number">10</span>)</span><br>&#123;<br>  <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;你好&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>f();<span class="hljs-comment">//这里就可以不用传</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="11-3-函数的重载"><a href="#11-3-函数的重载" class="headerlink" title="11.3 函数的重载"></a>11.3 函数的重载</h2><blockquote><ul><li>同一个作用域内；</li><li>函数名相同；</li><li>函数参数<strong>类型不同</strong>或者<strong>个数不同</strong>或者<strong>顺序不同</strong>；</li></ul></blockquote><ol><li>函数名可以相同，提高复用性；</li><li>返回值不可以作为重载的条件；<code>void f()和int f()</code>；<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f()调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(int a)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(int a,int b)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">double</span> b)</span><br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(double b)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>f();<br>f(<span class="hljs-number">10</span>);<br>f(<span class="hljs-number">10.0</span>);<br>f(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/Snipaste_2022-03-27_21-09-09.png#crop=0&crop=0&crop=1&crop=1&id=h6clW&originHeight=1016&originWidth=2489&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li></ol><h2 id="11-4-函数重载注意事项"><a href="#11-4-函数重载注意事项" class="headerlink" title="11.4 函数重载注意事项"></a>11.4 函数重载注意事项</h2><ol><li>引用作为重载的条件；</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a)</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(int &amp;a)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;a)</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(const int &amp;a)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>f(a); <span class="hljs-comment">// f(int &amp;a)调用了！</span><br>f(<span class="hljs-number">10</span>);<span class="hljs-comment">// f(const int &amp;a)调用了！</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>函数重载遇见默认参数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a,<span class="hljs-type">int</span> &amp;b = <span class="hljs-number">10</span>)</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(int &amp;a ,int &amp;b = 10)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a)</span> &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;f(const int &amp;a)调用了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>f(a); <span class="hljs-comment">// 错误</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11-5-内联函数"><a href="#11-5-内联函数" class="headerlink" title="11.5 内联函数"></a>11.5 内联函数</h2><p>函数声明之后定义，在主函数中被多次调用，原始写法：这样的写法会使程序在函数之间来回跳转，消耗一定的执行速度代价。使用内联函数的方法可以将show函数放在main函数里，避免来回跳转；但会占用一定的内存；使用较小的函数体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> std::cout; <span class="hljs-keyword">using</span> std::endl; <span class="hljs-keyword">using</span> std::string;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">short</span> num, <span class="hljs-type">const</span> string message)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">show</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;我是啥啥鸟&quot;</span>);<br><span class="hljs-built_in">show</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;我是啥啥鸟&quot;</span>);<br><span class="hljs-built_in">show</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;我是啥啥鸟&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">short</span> num, <span class="hljs-type">const</span> string message)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;亲爱的&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot;号，&quot;</span> &lt;&lt; message &lt;&lt; endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>内联函数：相当于把函数嵌入进去</p><ol><li>内联函数不能递归</li><li>函数体太大的函数，编译器不会将其作为内联函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">short</span> num, <span class="hljs-type">const</span> string message)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">show</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;我是啥啥鸟&quot;</span>);<br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//short num = 1;</span><br><span class="hljs-comment">//string message = &quot;我是啥啥鸟&quot;;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;亲爱的&quot; &lt;&lt; num &lt;&lt; &quot;号，&quot; &lt;&lt; message &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-built_in">show</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;我是啥啥鸟&quot;</span>);<br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//short num = 1;</span><br><span class="hljs-comment">//string message = &quot;我是啥啥鸟&quot;;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;亲爱的&quot; &lt;&lt; num &lt;&lt; &quot;号，&quot; &lt;&lt; message &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-built_in">show</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;我是啥啥鸟&quot;</span>);<br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//short num = 1;</span><br><span class="hljs-comment">//string message = &quot;我是啥啥鸟&quot;;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;亲爱的&quot; &lt;&lt; num &lt;&lt; &quot;号，&quot; &lt;&lt; message &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">short</span> num, <span class="hljs-type">const</span> string message)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;亲爱的&quot;</span> &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot;号，&quot;</span> &lt;&lt; message &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
